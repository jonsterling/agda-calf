{-# OPTIONS --rewriting #-}

-- Open/extensional modality.

module Calf.Phase.Open where

open import Calf.Prelude
open import Calf.CBPV
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl)

open import Calf.Phase.Core


‚óØ : ‚ñ° ‚Üí ‚ñ°
‚óØ ùïÅ = (u : ext) ‚Üí ùïÅ

postulate
  open‚Å∫ : (ext ‚Üí tp‚Å∫) ‚Üí tp‚Å∫
  open‚Å∫/decode : ‚àÄ {A} ‚Üí val (open‚Å∫ A) ‚â° ((u : ext) ‚Üí val (A u))
  {-# REWRITE open‚Å∫/decode #-}

  open‚Åª : (ext ‚Üí tp‚Åª) ‚Üí tp‚Åª
  open‚Åª/decode : ‚àÄ {A} ‚Üí val (U (open‚Åª A)) ‚â° ((u : ext) ‚Üí cmp (A u))
  {-# REWRITE open‚Åª/decode #-}

infix 10 ‚óØ‚Å∫_ ‚óØ‚Åª_
‚óØ‚Å∫_ : tp‚Å∫ ‚Üí tp‚Å∫
‚óØ‚Å∫ A = open‚Å∫ Œª _ ‚Üí A
‚óØ‚Åª_ : tp‚Åª ‚Üí tp‚Åª
‚óØ‚Åª A = open‚Åª Œª _ ‚Üí A


module _ where
  open import Algebra.Cost

  ‚óØ-CostMonoid : CostMonoid ‚Üí CostMonoid
  ‚óØ-CostMonoid cm =
    record
      { ‚ÑÇ = ‚óØ ‚ÑÇ
      ; _+_ = Œª c‚ÇÅ c‚ÇÇ u ‚Üí c‚ÇÅ u + c‚ÇÇ u
      ; zero = Œª u ‚Üí zero
      ; _‚â§_ = Œª c‚ÇÅ c‚ÇÇ ‚Üí (u : ext) ‚Üí c‚ÇÅ u ‚â§ c‚ÇÇ u
      ; isCostMonoid =
          record
            { isMonoid =
                record
                  { isSemigroup =
                      record
                        { isMagma =
                            record
                              { isEquivalence = Eq.isEquivalence
                              ; ‚àô-cong = Eq.cong‚ÇÇ _
                              }
                        ; assoc = Œª c‚ÇÅ c‚ÇÇ c‚ÇÉ ‚Üí funext/Œ© Œª u ‚Üí +-assoc (c‚ÇÅ u) (c‚ÇÇ u) (c‚ÇÉ u)
                        }
                  ; identity =
                      (Œª c ‚Üí funext/Œ© Œª u ‚Üí +-identityÀ° (c u)) ,
                      (Œª c ‚Üí funext/Œ© Œª u ‚Üí +-identity ≥ (c u))
                  }
            ; isPreorder =
                record
                  { isEquivalence = Eq.isEquivalence
                  ; reflexive = Œª h u ‚Üí ‚â§-reflexive (Eq.cong (Œª x ‚Üí x u) h)
                  ; trans = Œª h‚ÇÅ h‚ÇÇ u ‚Üí ‚â§-trans (h‚ÇÅ u) (h‚ÇÇ u)
                  }
            ; isMonotone =
                record
                  { ‚àô-mono-‚â§ = Œª h‚ÇÅ h‚ÇÇ u ‚Üí +-mono-‚â§ (h‚ÇÅ u) (h‚ÇÇ u)
                  }
            }
      }
      where
        open CostMonoid cm
        open import Data.Product
