{-# OPTIONS --rewriting #-}

-- The basic CBPV metalanguage.

module Calf.CBPV where

open import Calf.Prelude
open import Relation.Binary.PropositionalEquality
open import Data.Unit using () renaming (tt to triv) public
open import Data.Unit renaming (‚ä§ to Unit)
open import Data.Product using (_,_; proj‚ÇÅ; proj‚ÇÇ) public
open import Data.Product using (Œ£; _√ó_)

postulate
  tp‚Å∫ : ‚ñ°
  tp‚Åª : ‚ñ°
  val : tp‚Å∫ ‚Üí ‚ñ°

  F : tp‚Å∫ ‚Üí tp‚Åª
  U : tp‚Åª ‚Üí tp‚Å∫

{-# POLARITY val ++ #-}
{-# POLARITY F ++ #-}
{-# POLARITY U ++ #-}

-- This is equivalent to adding "thunk / force" operations but less bureaucratic.
cmp : tp‚Åª ‚Üí ‚ñ°
cmp X = val (U X)

variable
  A B C : tp‚Å∫
  X Y Z : tp‚Åª


-- Value types

postulate
  meta‚Å∫ : Set ‚Üí tp‚Å∫
  meta‚Å∫/decode : {ùïä : Set} ‚Üí val (meta‚Å∫ ùïä) ‚â° ùïä
  {-# REWRITE meta‚Å∫/decode #-}
{-# POLARITY meta‚Å∫ ++ #-}

Œ£‚Å∫ : (A : tp‚Å∫) (B : val A ‚Üí tp‚Å∫) ‚Üí tp‚Å∫
Œ£‚Å∫ A B = meta‚Å∫ (Œ£ (val A) Œª a ‚Üí val (B a))


-- Computation types

postulate
  ret : val A ‚Üí cmp (F A)
  bind : (X : tp‚Åª) ‚Üí cmp (F A) ‚Üí (val A ‚Üí cmp X) ‚Üí cmp X

  bind/Œ≤ : {a : val A} {f : val A ‚Üí cmp X} ‚Üí bind X (ret {A} a) f ‚â° f a
  bind/Œ∑ : {e : cmp (F A)} ‚Üí bind (F A) e ret ‚â° e
  bind/assoc : {e : cmp (F A)} {f : val A ‚Üí cmp (F B)} {g : val B ‚Üí cmp X} ‚Üí
    bind X (bind (F B) e f) g ‚â° bind X e (Œª a ‚Üí bind X (f a) g)
  {-# REWRITE bind/Œ≤ bind/Œ∑ bind/assoc #-}

  Œ† : (A : tp‚Å∫) (X : val A ‚Üí tp‚Åª) ‚Üí tp‚Åª
  Œ†/decode : {X : val A ‚Üí tp‚Åª} ‚Üí val (U (Œ† A X)) ‚â° ((a : val A) ‚Üí cmp (X a))
  {-# REWRITE Œ†/decode #-}

  prod‚Åª : tp‚Åª ‚Üí tp‚Åª ‚Üí tp‚Åª
  prod‚Åª/decode : val (U (prod‚Åª X Y)) ‚â° (cmp X √ó cmp Y)
  {-# REWRITE prod‚Åª/decode #-}

  unit‚Åª : tp‚Åª
  unit‚Åª/decode : val (U unit‚Åª) ‚â° Unit
  {-# REWRITE unit‚Åª/decode #-}

  Œ£‚Åª : (A : tp‚Å∫) (X : val A ‚Üí tp‚Åª) ‚Üí tp‚Åª
  Œ£‚Åª/decode : {X : val A ‚Üí tp‚Åª} ‚Üí val (U (Œ£‚Åª A X)) ‚â° Œ£ (val A) Œª a ‚Üí cmp (X a)
  {-# REWRITE Œ£‚Åª/decode #-}

_‚ãâ_ : tp‚Å∫ ‚Üí tp‚Åª ‚Üí tp‚Åª
A ‚ãâ X = Œ£‚Åª A Œª _ ‚Üí X
