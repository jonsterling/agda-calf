{-# OPTIONS --cubical-compatible --safe #-}

module Algebra.Cost.Bundles where

open import Algebra.Core
open import Algebra.Cost.Structures
open import Relation.Binary using (Rel; _Preserves_‚ü∂_; _Preserves‚ÇÇ_‚ü∂_‚ü∂_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; resp‚ÇÇ)
open import Level using (0‚Ñì)


record CostMonoid : Set‚ÇÅ where
  infixl 6 _+_

  field
    ‚ÑÇ            : Set
    zero         : ‚ÑÇ
    _+_          : Op‚ÇÇ ‚ÑÇ
    _‚â§_          : Rel ‚ÑÇ 0‚Ñì
    isCostMonoid : IsCostMonoid ‚ÑÇ zero _+_ _‚â§_

  open IsCostMonoid isCostMonoid public

  module ‚â§-Reasoning where
    open import Relation.Binary.Reasoning.Base.Triple
      isPreorder
      ‚â§-trans
      (resp‚ÇÇ _‚â§_)
      (Œª h ‚Üí h)
      ‚â§-trans
      ‚â§-trans
      public
      hiding (step-‚âà; step-‚âàÀò; step-<)


record ParCostMonoid : Set‚ÇÅ where
  infixl 7 _‚äó_
  infixl 6 _‚äï_

  field
    ‚ÑÇ               : Set
    ùüò               : ‚ÑÇ
    _‚äï_             : Op‚ÇÇ ‚ÑÇ
    _‚äó_             : Op‚ÇÇ ‚ÑÇ
    _‚â§_             : Rel ‚ÑÇ 0‚Ñì
    isParCostMonoid : IsParCostMonoid ‚ÑÇ ùüò _‚äï_ _‚äó_ _‚â§_

  open IsParCostMonoid isParCostMonoid public

  costMonoid : CostMonoid
  costMonoid = record
    { ‚ÑÇ = ‚ÑÇ
    ; _+_ = _‚äï_
    ; zero = ùüò
    ; _‚â§_ = _‚â§_
    ; isCostMonoid = record
      { isMonoid = isMonoid
      ; isPreorder = isPreorder
      ; isMonotone = isMonotone-‚äï
      }
    }

  module ‚â§-Reasoning where
    open import Relation.Binary.Reasoning.Base.Triple
      isPreorder
      ‚â§-trans
      (resp‚ÇÇ _‚â§_)
      (Œª h ‚Üí h)
      ‚â§-trans
      ‚â§-trans
      public
      hiding (step-‚âà; step-‚âàÀò; step-<)
