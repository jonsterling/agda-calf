{-# OPTIONS --rewriting #-}

module Examples.Exp2 where

open import Algebra.Cost

parCostMonoid = ‚Ñï¬≤-ParCostMonoid
open ParCostMonoid parCostMonoid

open import Calf costMonoid
open import Calf.Parallel parCostMonoid
open import Calf.Data.Bool
open import Calf.Data.Nat
open import Calf.Data.IsBounded costMonoid
open import Calf.Data.BigO costMonoid

open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl; _‚â¢_; module ‚â°-Reasoning)
open import Data.Nat as Nat using (_+_; pred; _*_; _^_; _‚äî_)
import Data.Nat.Properties as N
open import Data.Nat.PredExp2
open import Data.Empty

open import Function using (_‚àò_)


Correct : cmp (Œ† nat Œª _ ‚Üí F nat) ‚Üí Set
Correct exp‚ÇÇ = (n : ‚Ñï) ‚Üí ‚óØ (exp‚ÇÇ n ‚â° ret (2 ^ n))

module Slow where
  exp‚ÇÇ : cmp (Œ† nat Œª _ ‚Üí F nat)
  exp‚ÇÇ zero = ret (suc zero)
  exp‚ÇÇ (suc n) =
    bind (F nat) (exp‚ÇÇ n ‚à• exp‚ÇÇ n) Œª (r‚ÇÅ , r‚ÇÇ) ‚Üí
      step (F nat) (1 , 1) (ret (r‚ÇÅ + r‚ÇÇ))

  exp‚ÇÇ/bound : cmp (Œ† nat Œª _ ‚Üí F nat)
  exp‚ÇÇ/bound n = step (F nat) (pred[2^ n ] , n) (ret (2 ^ n))

  exp‚ÇÇ/is-bounded : ‚àÄ n ‚Üí exp‚ÇÇ n ‚â§‚Åª[ F nat ] exp‚ÇÇ/bound n
  exp‚ÇÇ/is-bounded zero    = ‚â§‚Åª-refl
  exp‚ÇÇ/is-bounded (suc n) =
    let open ‚â§‚Åª-Reasoning (F nat) in
    begin
      (bind (F nat) (exp‚ÇÇ n ‚à• exp‚ÇÇ n) Œª (r‚ÇÅ , r‚ÇÇ) ‚Üí
        step (F nat) (1 , 1) (ret (r‚ÇÅ + r‚ÇÇ)))
    ‚â§‚ü®
      ‚â§‚Åª-mono‚ÇÇ (Œª e‚ÇÅ e‚ÇÇ ‚Üí bind (F nat) (e‚ÇÅ ‚à• e‚ÇÇ) Œª (r‚ÇÅ , r‚ÇÇ) ‚Üí step (F nat) (1 , 1) (ret (r‚ÇÅ + r‚ÇÇ)))
        (exp‚ÇÇ/is-bounded n)
        (exp‚ÇÇ/is-bounded n)
    ‚ü©
      (bind (F nat) ((step (F nat) (pred[2^ n ] , n) (ret (2 ^ n))) ‚à• (step (F nat) (pred[2^ n ] , n) (ret (2 ^ n)))) Œª (r‚ÇÅ , r‚ÇÇ) ‚Üí
        step (F nat) (1 , 1) (ret (r‚ÇÅ + r‚ÇÇ)))
    ‚â°‚ü®‚ü©
      step (F nat) (pred[2^ n ] + pred[2^ n ] + 1 , n ‚äî n + 1) (ret (2 ^ n + 2 ^ n))
    ‚â°‚ü®
      Eq.cong‚ÇÇ (step (F nat))
        (Eq.cong‚ÇÇ _,_
          (Eq.trans (N.+-comm _ 1) (pred[2^suc[n]] n))
          (Eq.trans (N.+-comm _ 1) (Eq.cong (1 +_) (N.‚äî-idem n))))
        (Eq.cong ret (lemma/2^suc n))
    ‚ü©
      step (F nat) (pred[2^ suc n ] , suc n) (ret (2 ^ suc n))
    ‚àé

  exp‚ÇÇ/correct : Correct exp‚ÇÇ
  exp‚ÇÇ/correct n u = Eq.trans (‚â§‚Åª-ext-‚â° u (exp‚ÇÇ/is-bounded n)) (step/ext (F nat) (ret (2 ^ n)) (pred[2^ n ] , n) u)

  exp‚ÇÇ/asymptotic : given nat measured-via (Œª n ‚Üí n) , exp‚ÇÇ ‚ààùìû(Œª n ‚Üí 2 ^ n , n)
  exp‚ÇÇ/asymptotic =
    f[n]‚â§g[n]via Œª n ‚Üí
      ‚â§‚Åª-mono (Œª e ‚Üí bind (F _) e (Œª _ ‚Üí ret triv))
        (‚â§‚Åª-trans (exp‚ÇÇ/is-bounded n) (step-monoÀ°-‚â§‚Åª (ret (2 ^ n)) (N.pred[n]‚â§n {2 ^ n} , N.‚â§-refl {n})))


module Fast where

  exp‚ÇÇ : cmp (Œ† nat Œª _ ‚Üí F nat)
  exp‚ÇÇ zero = ret (suc zero)
  exp‚ÇÇ (suc n) =
    bind (F nat) (exp‚ÇÇ n) Œª r ‚Üí
      step (F nat) (1 , 1) (ret (r + r))

  exp‚ÇÇ/bound : cmp (Œ† nat Œª _ ‚Üí F nat)
  exp‚ÇÇ/bound n = step (F nat) (n , n) (ret (2 ^ n))

  exp‚ÇÇ/is-bounded : ‚àÄ n ‚Üí exp‚ÇÇ n ‚â§‚Åª[ F nat ] exp‚ÇÇ/bound n
  exp‚ÇÇ/is-bounded zero    = ‚â§‚Åª-refl
  exp‚ÇÇ/is-bounded (suc n) =
    let open ‚â§‚Åª-Reasoning (F nat) in
    begin
      (bind (F nat) (exp‚ÇÇ n) Œª r ‚Üí
        step (F nat) (1 , 1) (ret (r + r)))
    ‚â§‚ü® ‚â§‚Åª-mono (Œª e ‚Üí bind (F nat) e Œª r ‚Üí step (F nat) (1 , 1) (ret (r + r))) (exp‚ÇÇ/is-bounded n) ‚ü©
      (bind (F nat) (step (F nat) (n , n) (ret (2 ^ n))) Œª r ‚Üí
        step (F nat) (1 , 1) (ret (r + r)))
    ‚â°‚ü®‚ü©
      step (F nat) (n + 1 , n + 1) (ret (2 ^ n + 2 ^ n))
    ‚â°‚ü®
      Eq.cong‚ÇÇ (step (F nat))
        (Eq.cong‚ÇÇ _,_ (N.+-comm _ 1) (N.+-comm _ 1))
        (Eq.cong ret (lemma/2^suc n))
    ‚ü©
      step (F nat) (suc n , suc n) (ret (2 ^ suc n))
    ‚àé

  exp‚ÇÇ/correct : Correct exp‚ÇÇ
  exp‚ÇÇ/correct n u = Eq.trans (‚â§‚Åª-ext-‚â° u (exp‚ÇÇ/is-bounded n)) (step/ext (F nat) (ret (2 ^ n)) (n , n) u)

  exp‚ÇÇ/asymptotic : given nat measured-via (Œª n ‚Üí n) , exp‚ÇÇ ‚ààùìû(Œª n ‚Üí n , n)
  exp‚ÇÇ/asymptotic = f[n]‚â§g[n]via (‚â§‚Åª-mono (Œª e ‚Üí bind (F _) e _) ‚àò exp‚ÇÇ/is-bounded)


slow‚â°fast : ‚óØ (Slow.exp‚ÇÇ ‚â° Fast.exp‚ÇÇ)
slow‚â°fast u = funext Œª n ‚Üí
  begin
    Slow.exp‚ÇÇ n
  ‚â°‚ü® Slow.exp‚ÇÇ/correct n u ‚ü©
    ret (2 ^ n)
  ‚â°Àò‚ü® Fast.exp‚ÇÇ/correct n u ‚ü©
    Fast.exp‚ÇÇ n
  ‚àé
    where open ‚â°-Reasoning
