{-# OPTIONS --prop --rewriting #-}

module Examples.BinarySearchTree where

open import Calf.CostMonoid
open import Calf.CostMonoids using (‚Ñï-CostMonoid)

costMonoid = ‚Ñï-CostMonoid
open CostMonoid costMonoid renaming (zero to ùüò; _+_ to _‚äï_)

open import Level using (0‚Ñì)

open import Calf costMonoid
open import Calf.Types.Unit
open import Calf.Types.Product
open import Calf.Types.Sum
open import Calf.Types.Bool
open import Calf.Types.Maybe
open import Calf.Types.Nat
open import Calf.Types.List
open import Calf.Types.Bounded costMonoid
open import Data.String using (String)
open import Data.Nat as Nat using (_+_; _*_; _<_; _>_; _‚â§·µá_; _<·µá_; ‚åä_/2‚åã; _‚â°·µá_; _‚â•_; _‚à∏_)
open import Data.Bool as Bool using (not; _‚àß_)
import Data.Nat.Properties as Nat

open import Function

open import Relation.Nullary
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl; _‚â¢_; module ‚â°-Reasoning; ‚â¢-sym)


variable
  A B C : tp pos
  X Y Z : tp neg
  P Q : val A ‚Üí tp neg


-- Middle Sequence
record MSequence : Set where
  field
    seq : tp pos ‚Üí tp pos

    empty : cmp (F (seq A))
    join : cmp (Œ† (seq A) Œª s‚ÇÅ ‚Üí Œ† A Œª a ‚Üí Œ† (seq A) Œª s‚ÇÇ ‚Üí F (seq A))

    rec : {X : tp neg} ‚Üí
      cmp
        ( Œ† (U X) Œª _ ‚Üí
          Œ† (U (Œ† (seq A) Œª _ ‚Üí Œ† (U X) Œª _ ‚Üí Œ† A Œª _ ‚Üí Œ† (seq A) Œª _ ‚Üí Œ† (U X) Œª _ ‚Üí X)) Œª _ ‚Üí
          Œ† (seq A) Œª _ ‚Üí X
        )


ListMSequence : MSequence
ListMSequence =
  record
    { seq = list
    ; empty = ret []
    ; join =
        Œª {A} l‚ÇÅ a l‚ÇÇ ‚Üí
          let n = length l‚ÇÅ + 1 + length l‚ÇÇ in
          step (F (list A)) n (ret (l‚ÇÅ ++ [ a ] ++ l‚ÇÇ))
    ; rec = Œª {A} {X} ‚Üí rec {A} {X}
    }
  where
    rec : {X : tp neg} ‚Üí
      cmp
        ( Œ† (U X) Œª _ ‚Üí
          Œ† (U (Œ† (list A) Œª _ ‚Üí Œ† (U X) Œª _ ‚Üí Œ† A Œª _ ‚Üí Œ† (list A) Œª _ ‚Üí Œ† (U X) Œª _ ‚Üí X)) Œª _ ‚Üí
          Œ† (list A) Œª _ ‚Üí X
        )
    rec {A} {X} z f []      = z
    rec {A} {X} z f (x ‚à∑ l) = step X 1 (f [] z x l (rec {A} {X} z f l))


RedBlackMSequence : MSequence
RedBlackMSequence =
  record
    { seq = rbt
    ; empty = ret ‚ü™ leaf ‚ü´
    ; join = join
    ; rec = Œª {A} {X} ‚Üí rec {A} {X}
    }
  where
    data Color : Set where
      red : Color
      black : Color
    color : tp pos
    color = U (meta Color)

    -- Indexed Red Black Tree
    data IRBT (A : tp pos) : val color ‚Üí val nat ‚Üí Set where
      leaf  : IRBT A black zero
      red   : {n : val nat}
        (t‚ÇÅ : IRBT A black n) (a : val A) (t‚ÇÇ : IRBT A black n)
        ‚Üí IRBT A red n
      black : {n : val nat} {y‚ÇÅ y‚ÇÇ : val color}
        (t‚ÇÅ : IRBT A y‚ÇÅ n) (a : val A) (t‚ÇÇ : IRBT A y‚ÇÇ n)
        ‚Üí IRBT A black (suc n)
    irbt : tp pos ‚Üí val color ‚Üí val nat ‚Üí tp pos
    irbt A y n = U (meta (IRBT A y n))

    record RBT (A : tp pos) : Set where
      pattern
      constructor ‚ü™_‚ü´
      field
        {y} : val color
        {n} : val nat
        t : val (irbt A y n)
    rbt : tp pos ‚Üí tp pos
    rbt A = U (meta (RBT A))


    data AlmostLeftRBT (A : tp pos) : (right-color : val color) ‚Üí val nat ‚Üí Set where
      violation :
        {n : val nat}
        ‚Üí IRBT A red n ‚Üí val A ‚Üí IRBT A black n
        ‚Üí AlmostLeftRBT A red n
      valid :
        {right-color : val color} {n : val nat} {y : val color} ‚Üí IRBT A y n
        ‚Üí AlmostLeftRBT A right-color n
    alrbt : tp pos ‚Üí val color ‚Üí val nat ‚Üí tp pos
    alrbt A y n = U (meta (AlmostLeftRBT A y n))

    joinLeft :
      cmp
        ( Œ† color Œª y‚ÇÅ ‚Üí Œ† nat Œª n‚ÇÅ ‚Üí Œ† (irbt A y‚ÇÅ n‚ÇÅ) Œª _ ‚Üí
          Œ† A Œª _ ‚Üí
          Œ† color Œª y‚ÇÇ ‚Üí Œ† nat Œª n‚ÇÇ ‚Üí Œ† (irbt A y‚ÇÇ n‚ÇÇ) Œª _ ‚Üí
          Œ† (U (meta (n‚ÇÅ < n‚ÇÇ))) Œª _ ‚Üí
          F (alrbt A y‚ÇÇ n‚ÇÇ)
        )
    joinLeft {A} y‚ÇÅ n‚ÇÅ t‚ÇÅ a .red n‚ÇÇ (red t‚ÇÇ‚ÇÅ a‚ÇÅ t‚ÇÇ‚ÇÇ) n‚ÇÅ<n‚ÇÇ =
      step (F (alrbt A red n‚ÇÇ)) 1 $
      bind (F (alrbt A red n‚ÇÇ)) (joinLeft _ _ t‚ÇÅ a _ _ t‚ÇÇ‚ÇÅ n‚ÇÅ<n‚ÇÇ) Œª
        { (valid {y = red} t') ‚Üí ret (violation t' a‚ÇÅ t‚ÇÇ‚ÇÇ)
        ; (valid {y = black} t') ‚Üí ret (valid (red t' a‚ÇÅ t‚ÇÇ‚ÇÇ)) }
    joinLeft {A} y‚ÇÅ n‚ÇÅ t‚ÇÅ a .black (suc n‚ÇÇ) (black t‚ÇÇ‚ÇÅ a‚ÇÅ t‚ÇÇ‚ÇÇ) n‚ÇÅ<n‚ÇÇ with n‚ÇÅ Nat.‚âü n‚ÇÇ
    joinLeft red n‚ÇÅ (red t‚ÇÅ‚ÇÅ a‚ÇÅ t‚ÇÅ‚ÇÇ) a .black (suc n‚ÇÅ) (black t‚ÇÇ‚ÇÅ a‚ÇÇ t‚ÇÇ‚ÇÇ) n‚ÇÅ<n‚ÇÇ | yes refl =
      ret (valid (red (black t‚ÇÅ‚ÇÅ a‚ÇÅ t‚ÇÅ‚ÇÇ) a (black t‚ÇÇ‚ÇÅ a‚ÇÇ t‚ÇÇ‚ÇÇ)))
    joinLeft black n‚ÇÅ t‚ÇÅ a .black (suc n‚ÇÇ) (black {y‚ÇÅ = red} (red t‚ÇÇ‚ÇÅ‚ÇÅ a‚ÇÅ‚ÇÅ t‚ÇÇ‚ÇÅ‚ÇÇ) a‚ÇÅ t‚ÇÇ‚ÇÇ) n‚ÇÅ<n‚ÇÇ | yes refl =
      ret (valid (red (black t‚ÇÅ a t‚ÇÇ‚ÇÅ‚ÇÅ) a‚ÇÅ‚ÇÅ (black t‚ÇÇ‚ÇÅ‚ÇÇ a‚ÇÅ t‚ÇÇ‚ÇÇ)))
    joinLeft black n‚ÇÅ t‚ÇÅ a .black (suc n‚ÇÇ) (black {y‚ÇÅ = black} t‚ÇÇ‚ÇÅ a‚ÇÅ t‚ÇÇ‚ÇÇ) n‚ÇÅ<n‚ÇÇ | yes refl =
      ret (valid (black (red t‚ÇÅ a t‚ÇÇ‚ÇÅ) a‚ÇÅ t‚ÇÇ‚ÇÇ))
    ... | no n‚ÇÅ‚â¢n‚ÇÇ =
      step (F (alrbt A black (suc n‚ÇÇ))) 1 $
      bind (F (alrbt A black (suc n‚ÇÇ))) (joinLeft _ _ t‚ÇÅ a _ _ t‚ÇÇ‚ÇÅ (Nat.‚â§‚àß‚â¢‚áí< (Nat.‚â§-pred n‚ÇÅ<n‚ÇÇ) n‚ÇÅ‚â¢n‚ÇÇ)) Œª
        { (violation (red t'‚ÇÅ‚ÇÅ a'‚ÇÅ t'‚ÇÅ‚ÇÇ) a' t'‚ÇÇ) ‚Üí ret (valid (red (black t'‚ÇÅ‚ÇÅ a'‚ÇÅ t'‚ÇÅ‚ÇÇ) a' (black t'‚ÇÇ a‚ÇÅ t‚ÇÇ‚ÇÇ)))
        ; (valid t') ‚Üí ret (valid (black t' a‚ÇÅ t‚ÇÇ‚ÇÇ)) }

    joinLeft/cost : (y : val color) (n‚ÇÅ n‚ÇÇ : val nat) ‚Üí ‚ÑÇ
    joinLeft/cost red n‚ÇÅ n‚ÇÇ = 1 + (2 * (n‚ÇÇ ‚à∏ n‚ÇÅ))
    joinLeft/cost black n‚ÇÅ n‚ÇÇ = (2 * (n‚ÇÇ ‚à∏ n‚ÇÅ))

    joinLeft/is-bounded' : ‚àÄ y‚ÇÅ n‚ÇÅ t‚ÇÅ a y‚ÇÇ n‚ÇÇ t‚ÇÇ n‚ÇÅ<n‚ÇÇ
        ‚Üí IsBounded (alrbt A y‚ÇÇ n‚ÇÇ) (joinLeft y‚ÇÅ n‚ÇÅ t‚ÇÅ a y‚ÇÇ n‚ÇÇ t‚ÇÇ n‚ÇÅ<n‚ÇÇ) (joinLeft/cost y‚ÇÇ n‚ÇÅ n‚ÇÇ)

    joinLeft/is-bounded : ‚àÄ {A} y‚ÇÅ n‚ÇÅ t‚ÇÅ a y‚ÇÇ n‚ÇÇ t‚ÇÇ n‚ÇÅ<n‚ÇÇ
        ‚Üí IsBounded (alrbt A y‚ÇÇ n‚ÇÇ) (joinLeft y‚ÇÅ n‚ÇÅ t‚ÇÅ a y‚ÇÇ n‚ÇÇ t‚ÇÇ n‚ÇÅ<n‚ÇÇ) (1 + (2 * (n‚ÇÇ ‚à∏ n‚ÇÅ)))

    joinLeft/is-bounded' {A} y‚ÇÅ n‚ÇÅ t‚ÇÅ a .red n‚ÇÇ (red t‚ÇÇ‚ÇÅ a‚ÇÅ t‚ÇÇ‚ÇÇ) n‚ÇÅ<n‚ÇÇ =
      bound/step 1 (2 * (n‚ÇÇ ‚à∏ n‚ÇÅ))
      (Eq.subst
        (IsBounded _ _)
        (Nat.+-identity ≥ (2 * (n‚ÇÇ ‚à∏ n‚ÇÅ)))
        (bound/bind/const (2 * (n‚ÇÇ ‚à∏ n‚ÇÅ)) 0
          (joinLeft/is-bounded' _ _ t‚ÇÅ a _ _ t‚ÇÇ‚ÇÅ n‚ÇÅ<n‚ÇÇ)
          Œª { (valid (red _ _ _)) ‚Üí bound/ret
            ; (valid (black _ _ _)) ‚Üí bound/ret }))
    joinLeft/is-bounded' y‚ÇÅ n‚ÇÅ t‚ÇÅ a .black (suc n‚ÇÇ) (black t‚ÇÇ‚ÇÅ a‚ÇÅ t‚ÇÇ‚ÇÇ) n‚ÇÅ<n‚ÇÇ with n‚ÇÅ Nat.‚âü n‚ÇÇ
    joinLeft/is-bounded' red _ (red _ _ _) _ .black _ (black _ _ _) _ | yes refl =
      bound/relax (Œª u ‚Üí Nat.z‚â§n) bound/ret
    joinLeft/is-bounded' black _ _ _ .black _ (black {y‚ÇÅ = red} (red _ _ _) _ _) _ | yes refl =
      bound/relax (Œª u ‚Üí Nat.z‚â§n) bound/ret
    joinLeft/is-bounded' black _ _ _ .black _ (black {y‚ÇÅ = black} _ _ _) _ | yes refl =
      bound/relax (Œª u ‚Üí Nat.z‚â§n) bound/ret
    ...| no n‚ÇÅ‚â¢n‚ÇÇ =
      Eq.subst
        (IsBounded _ _) {x = 2 + 2 * (n‚ÇÇ ‚à∏ n‚ÇÅ)}
        (Eq.trans (Eq.sym (Nat.*-suc 2 (n‚ÇÇ ‚à∏ n‚ÇÅ))) (Eq.cong (2 *_) (Eq.sym (Nat.+-‚à∏-assoc 1 (Nat.‚â§-pred n‚ÇÅ<n‚ÇÇ)))))
        (bound/step 1 (1 + 2 * (n‚ÇÇ ‚à∏ n‚ÇÅ))
          (Eq.subst
            (IsBounded _ _) {x = 1 + (2 * (n‚ÇÇ ‚à∏ n‚ÇÅ)) + 0}
            (Nat.+-identity ≥ (1 + 2 * (n‚ÇÇ ‚à∏ n‚ÇÅ)))
            (bound/bind/const (1 + (2 * (n‚ÇÇ ‚à∏ n‚ÇÅ))) 0
              (joinLeft/is-bounded _ _ t‚ÇÅ a _ _ t‚ÇÇ‚ÇÅ _)
              Œª { (violation (red _ _ _) _ _) ‚Üí bound/ret
                ; (valid _) ‚Üí bound/ret })))

    joinLeft/is-bounded y‚ÇÅ n‚ÇÅ t‚ÇÅ a red n‚ÇÇ t‚ÇÇ n‚ÇÅ<n‚ÇÇ =
      joinLeft/is-bounded' y‚ÇÅ n‚ÇÅ t‚ÇÅ a red n‚ÇÇ t‚ÇÇ n‚ÇÅ<n‚ÇÇ
    joinLeft/is-bounded y‚ÇÅ n‚ÇÅ t‚ÇÅ a black n‚ÇÇ t‚ÇÇ n‚ÇÅ<n‚ÇÇ =
      bound/relax (Œª u ‚Üí Nat.n‚â§1+n _) (joinLeft/is-bounded' y‚ÇÅ n‚ÇÅ t‚ÇÅ a black n‚ÇÇ t‚ÇÇ n‚ÇÅ<n‚ÇÇ)

    data AlmostRightRBT (A : tp pos) : (left-color : val color) ‚Üí val nat ‚Üí Set where
      violation :
        {n : val nat}
        ‚Üí IRBT A black n ‚Üí val A ‚Üí IRBT A red n
        ‚Üí AlmostRightRBT A red n
      valid :
        {left-color : val color} {n : val nat} {y : val color} ‚Üí IRBT A y n
        ‚Üí AlmostRightRBT A left-color n
    arrbt : tp pos ‚Üí val color ‚Üí val nat ‚Üí tp pos
    arrbt A y n = U (meta (AlmostRightRBT A y n))

    joinRight :
      cmp
        ( Œ† color Œª y‚ÇÅ ‚Üí Œ† nat Œª n‚ÇÅ ‚Üí Œ† (irbt A y‚ÇÅ n‚ÇÅ) Œª _ ‚Üí
          Œ† A Œª _ ‚Üí
          Œ† color Œª y‚ÇÇ ‚Üí Œ† nat Œª n‚ÇÇ ‚Üí Œ† (irbt A y‚ÇÇ n‚ÇÇ) Œª _ ‚Üí
          Œ† (U (meta (n‚ÇÅ > n‚ÇÇ))) Œª _ ‚Üí
          F (arrbt A y‚ÇÅ n‚ÇÅ)
        )
    joinRight {A} .red n‚ÇÅ (red t‚ÇÅ‚ÇÅ a‚ÇÅ t‚ÇÅ‚ÇÇ) a y‚ÇÇ n‚ÇÇ t‚ÇÇ n‚ÇÅ>n‚ÇÇ =
      step (F (arrbt A red n‚ÇÅ)) 1 $
      bind (F (arrbt A red n‚ÇÅ)) (joinRight _ _ t‚ÇÅ‚ÇÇ a _ _ t‚ÇÇ n‚ÇÅ>n‚ÇÇ) Œª
        { (valid {y = red} t') ‚Üí ret (violation t‚ÇÅ‚ÇÅ a‚ÇÅ t')
        ; (valid {y = black} t') ‚Üí ret (valid (red t‚ÇÅ‚ÇÅ a‚ÇÅ t')) }
    joinRight {A} .black (suc n‚ÇÅ) (black t‚ÇÅ‚ÇÅ a‚ÇÅ t‚ÇÅ‚ÇÇ) a y‚ÇÇ n‚ÇÇ t‚ÇÇ n‚ÇÅ>n‚ÇÇ with n‚ÇÅ Nat.‚âü n‚ÇÇ
    joinRight .black (suc n‚ÇÅ) (black t‚ÇÅ‚ÇÅ a‚ÇÅ t‚ÇÅ‚ÇÇ) a red n‚ÇÅ (red t‚ÇÇ‚ÇÅ a‚ÇÇ t‚ÇÇ‚ÇÇ) n‚ÇÅ>n‚ÇÇ | yes refl =
      ret (valid (red (black t‚ÇÅ‚ÇÅ a‚ÇÅ t‚ÇÅ‚ÇÇ) a (black t‚ÇÇ‚ÇÅ a‚ÇÇ t‚ÇÇ‚ÇÇ)))
    joinRight .black (suc n‚ÇÅ) (black {y‚ÇÇ = red} t‚ÇÅ‚ÇÅ a‚ÇÅ (red t‚ÇÅ‚ÇÇ‚ÇÅ a‚ÇÅ‚ÇÇ t‚ÇÅ‚ÇÇ‚ÇÇ)) a black n‚ÇÅ t‚ÇÇ n‚ÇÅ>n‚ÇÇ | yes refl =
      ret (valid (red (black t‚ÇÅ‚ÇÅ a‚ÇÅ t‚ÇÅ‚ÇÇ‚ÇÅ) a‚ÇÅ‚ÇÇ (black t‚ÇÅ‚ÇÇ‚ÇÇ a t‚ÇÇ)))
    joinRight .black (suc n‚ÇÅ) (black {y‚ÇÇ = black} t‚ÇÅ‚ÇÅ a‚ÇÅ t‚ÇÅ‚ÇÇ) a black n‚ÇÅ t‚ÇÇ n‚ÇÅ>n‚ÇÇ | yes refl =
      ret (valid (black t‚ÇÅ‚ÇÅ a‚ÇÅ (red t‚ÇÅ‚ÇÇ a t‚ÇÇ)))
    ... | no n‚ÇÅ‚â¢n‚ÇÇ =
      step (F (arrbt A black (suc n‚ÇÅ))) 1 $
      bind (F (arrbt A black (suc n‚ÇÅ))) (joinRight _ _ t‚ÇÅ‚ÇÇ a _ _ t‚ÇÇ (Nat.‚â§‚àß‚â¢‚áí< (Nat.‚â§-pred n‚ÇÅ>n‚ÇÇ) (‚â¢-sym n‚ÇÅ‚â¢n‚ÇÇ))) Œª
        { (violation t'‚ÇÅ a' (red t'‚ÇÇ‚ÇÅ a'‚ÇÇ t'‚ÇÇ‚ÇÇ)) ‚Üí ret (valid (red (black t‚ÇÅ‚ÇÅ a‚ÇÅ t'‚ÇÅ) a' (black t'‚ÇÇ‚ÇÅ a'‚ÇÇ t'‚ÇÇ‚ÇÇ)))
        ; (valid t') ‚Üí ret (valid (black t‚ÇÅ‚ÇÅ a‚ÇÅ t'))  }

    joinRight/cost : (y : val color) (n‚ÇÅ n‚ÇÇ : val nat) ‚Üí ‚ÑÇ
    joinRight/cost red n‚ÇÅ n‚ÇÇ = 1 + (2 * (n‚ÇÅ ‚à∏ n‚ÇÇ))
    joinRight/cost black n‚ÇÅ n‚ÇÇ = (2 * (n‚ÇÅ ‚à∏ n‚ÇÇ))

    joinRight/is-bounded' : ‚àÄ y‚ÇÅ n‚ÇÅ t‚ÇÅ a y‚ÇÇ n‚ÇÇ t‚ÇÇ n‚ÇÅ>n‚ÇÇ
        ‚Üí IsBounded (arrbt A y‚ÇÅ n‚ÇÅ) (joinRight y‚ÇÅ n‚ÇÅ t‚ÇÅ a y‚ÇÇ n‚ÇÇ t‚ÇÇ n‚ÇÅ>n‚ÇÇ) (joinRight/cost y‚ÇÅ n‚ÇÅ n‚ÇÇ)

    joinRight/is-bounded : ‚àÄ {A} y‚ÇÅ n‚ÇÅ t‚ÇÅ a y‚ÇÇ n‚ÇÇ t‚ÇÇ n‚ÇÅ>n‚ÇÇ
        ‚Üí IsBounded (arrbt A y‚ÇÅ n‚ÇÅ) (joinRight y‚ÇÅ n‚ÇÅ t‚ÇÅ a y‚ÇÇ n‚ÇÇ t‚ÇÇ n‚ÇÅ>n‚ÇÇ) (1 + (2 * (n‚ÇÅ ‚à∏ n‚ÇÇ)))

    joinRight/is-bounded' red n‚ÇÅ (red t‚ÇÅ‚ÇÅ a‚ÇÅ t‚ÇÅ‚ÇÇ) a y‚ÇÇ n‚ÇÇ t‚ÇÇ n‚ÇÅ>n‚ÇÇ =
      bound/step 1 (2 * (n‚ÇÅ ‚à∏ n‚ÇÇ))
      (Eq.subst
        (IsBounded _ _)
        (Nat.+-identity ≥ (2 * (n‚ÇÅ ‚à∏ n‚ÇÇ)))
        (bound/bind/const (2 * (n‚ÇÅ ‚à∏ n‚ÇÇ)) 0
          (joinRight/is-bounded' _ _ t‚ÇÅ‚ÇÇ a _ _ t‚ÇÇ n‚ÇÅ>n‚ÇÇ)
          (Œª {(valid (red _ _ _)) ‚Üí bound/ret
            ; (valid (black _ _ _)) ‚Üí bound/ret })))
    joinRight/is-bounded' black (suc n‚ÇÅ) (black t‚ÇÅ‚ÇÅ a‚ÇÅ t‚ÇÅ‚ÇÇ) a y‚ÇÇ n‚ÇÇ t‚ÇÇ n‚ÇÅ>n‚ÇÇ with n‚ÇÅ Nat.‚âü n‚ÇÇ
    joinRight/is-bounded' black _ (black _ _ _) _ red _ (red _ _ _) _ | yes refl =
      bound/relax (Œª u ‚Üí Nat.z‚â§n) bound/ret
    joinRight/is-bounded' black _ (black {y‚ÇÇ = red} _ _ (red _ _ _)) _ black _ _ _ | yes refl =
      bound/relax (Œª u ‚Üí Nat.z‚â§n) bound/ret
    joinRight/is-bounded' black _ (black {y‚ÇÇ = black} _ _ _) _ black _ _ _ | yes refl =
      bound/relax (Œª u ‚Üí Nat.z‚â§n) bound/ret
    ... | no n‚ÇÅ‚â¢n‚ÇÇ =
      Eq.subst
        (IsBounded _ _) {x = 2 + 2 * (n‚ÇÅ ‚à∏ n‚ÇÇ)}
        (Eq.trans (Eq.sym (Nat.*-suc 2 (n‚ÇÅ ‚à∏ n‚ÇÇ))) (Eq.cong (2 *_) (Eq.sym (Nat.+-‚à∏-assoc 1 n‚ÇÅ>n‚ÇÇ))))
        (bound/step 1 (1 + 2 * (n‚ÇÅ ‚à∏ n‚ÇÇ))
          (Eq.subst
            (IsBounded _ _) {x = 1 + 2 * (n‚ÇÅ ‚à∏ n‚ÇÇ) + 0}
            (Nat.+-identity ≥ (1 + 2 * (n‚ÇÅ ‚à∏ n‚ÇÇ)))
            (bound/bind/const (1 + 2 * (n‚ÇÅ ‚à∏ n‚ÇÇ)) 0
              (joinRight/is-bounded _ _ t‚ÇÅ‚ÇÇ a _ _ t‚ÇÇ _)
              Œª { (violation _ _ (red _ _ _)) ‚Üí bound/ret
                ; (valid _) ‚Üí bound/ret })))

    joinRight/is-bounded red n‚ÇÅ t‚ÇÅ a y‚ÇÇ n‚ÇÇ t‚ÇÇ n‚ÇÅ>n‚ÇÇ =
      joinRight/is-bounded' red n‚ÇÅ t‚ÇÅ a y‚ÇÇ n‚ÇÇ t‚ÇÇ n‚ÇÅ>n‚ÇÇ
    joinRight/is-bounded black n‚ÇÅ t‚ÇÅ a y‚ÇÇ n‚ÇÇ t‚ÇÇ n‚ÇÅ>n‚ÇÇ =
      bound/relax (Œª u ‚Üí Nat.n‚â§1+n _) (joinRight/is-bounded' black n‚ÇÅ t‚ÇÅ a y‚ÇÇ n‚ÇÇ t‚ÇÇ n‚ÇÅ>n‚ÇÇ)

    i-join :
      cmp
        ( Œ† color Œª y‚ÇÅ ‚Üí Œ† nat Œª n‚ÇÅ ‚Üí Œ† (irbt A y‚ÇÅ n‚ÇÅ) Œª _ ‚Üí
          Œ† A Œª _ ‚Üí
          Œ† color Œª y‚ÇÇ ‚Üí Œ† nat Œª n‚ÇÇ ‚Üí Œ† (irbt A y‚ÇÇ n‚ÇÇ) Œª _ ‚Üí
          F (rbt A)
        )
    i-join {A} y‚ÇÅ n‚ÇÅ t‚ÇÅ a y‚ÇÇ n‚ÇÇ t‚ÇÇ with Nat.<-cmp n‚ÇÅ n‚ÇÇ
    i-join red n‚ÇÅ t‚ÇÅ a y‚ÇÇ n‚ÇÇ t‚ÇÇ | tri‚âà ¬¨n‚ÇÅ<n‚ÇÇ refl ¬¨n‚ÇÅ>n‚ÇÇ = ret ‚ü™ (black t‚ÇÅ a t‚ÇÇ) ‚ü´
    i-join black n‚ÇÅ t‚ÇÅ a red n‚ÇÇ t‚ÇÇ | tri‚âà ¬¨n‚ÇÅ<n‚ÇÇ refl ¬¨n‚ÇÅ>n‚ÇÇ = ret ‚ü™ (black t‚ÇÅ a t‚ÇÇ) ‚ü´
    i-join black n‚ÇÅ t‚ÇÅ a black n‚ÇÇ t‚ÇÇ | tri‚âà ¬¨n‚ÇÅ<n‚ÇÇ refl ¬¨n‚ÇÅ>n‚ÇÇ = ret ‚ü™ (red t‚ÇÅ a t‚ÇÇ) ‚ü´
    ... | tri< n‚ÇÅ<n‚ÇÇ n‚ÇÅ‚â¢n‚ÇÇ ¬¨n‚ÇÅ>n‚ÇÇ =
      bind (F (rbt A)) (joinLeft _ _ t‚ÇÅ a _ _ t‚ÇÇ n‚ÇÅ<n‚ÇÇ) Œª
        { (violation t'‚ÇÅ a' t'‚ÇÇ) ‚Üí ret ‚ü™ (black t'‚ÇÅ a' t'‚ÇÇ) ‚ü´
        ; (valid t') ‚Üí ret ‚ü™ t' ‚ü´}
    ... | tri> ¬¨n‚ÇÅ<n‚ÇÇ n‚ÇÅ‚â¢n‚ÇÇ n‚ÇÅ>n‚ÇÇ =
      bind (F (rbt A)) (joinRight _ _ t‚ÇÅ a _ _ t‚ÇÇ n‚ÇÅ>n‚ÇÇ) Œª
        { (violation t'‚ÇÅ a' t'‚ÇÇ) ‚Üí ret ‚ü™ black t'‚ÇÅ a' t'‚ÇÇ ‚ü´
        ; (valid t') ‚Üí ret ‚ü™ t' ‚ü´ }

    i-join/is-bounded : ‚àÄ {A} y‚ÇÅ n‚ÇÅ t‚ÇÅ a y‚ÇÇ n‚ÇÇ t‚ÇÇ
        ‚Üí IsBounded (rbt A) (i-join y‚ÇÅ n‚ÇÅ t‚ÇÅ a y‚ÇÇ n‚ÇÇ t‚ÇÇ) (1 + (2 * (n‚ÇÅ Nat.‚äî n‚ÇÇ ‚à∏ n‚ÇÅ Nat.‚äì n‚ÇÇ)))
    i-join/is-bounded {A} y‚ÇÅ n‚ÇÅ t‚ÇÅ a y‚ÇÇ n‚ÇÇ t‚ÇÇ with Nat.<-cmp n‚ÇÅ n‚ÇÇ
    i-join/is-bounded {A} red n‚ÇÅ t‚ÇÅ a y‚ÇÇ .n‚ÇÅ t‚ÇÇ | tri‚âà ¬¨n‚ÇÅ<n‚ÇÇ refl ¬¨n‚ÇÅ>n‚ÇÇ =
      bound/relax (Œª u ‚Üí Nat.z‚â§n) bound/ret
    i-join/is-bounded {A} black n‚ÇÅ t‚ÇÅ a red n‚ÇÅ t‚ÇÇ | tri‚âà ¬¨n‚ÇÅ<n‚ÇÇ refl ¬¨n‚ÇÅ>n‚ÇÇ =
      bound/relax (Œª u ‚Üí Nat.z‚â§n) bound/ret
    i-join/is-bounded {A} black n‚ÇÅ t‚ÇÅ a black n‚ÇÅ t‚ÇÇ | tri‚âà ¬¨n‚ÇÅ<n‚ÇÇ refl ¬¨n‚ÇÅ>n‚ÇÇ =
      bound/relax (Œª u ‚Üí Nat.z‚â§n) bound/ret
    ... | tri< n‚ÇÅ<n‚ÇÇ n‚ÇÅ‚â¢n‚ÇÇ ¬¨n‚ÇÅ>n‚ÇÇ =
      Eq.subst
        (IsBounded _ _) {x = 1 + 2 * (n‚ÇÇ ‚à∏ n‚ÇÅ) + 0}
        (Eq.cong suc (Eq.trans (Nat.+-identity ≥ (2 * (n‚ÇÇ ‚à∏ n‚ÇÅ))) (Eq.cong (2 *_) (Eq.cong‚ÇÇ (Œª x y ‚Üí x ‚à∏ y) (Eq.sym (Nat.m‚â§n‚áím‚äîn‚â°n (Nat.<‚áí‚â§ n‚ÇÅ<n‚ÇÇ))) (Eq.sym (Nat.m‚â§n‚áím‚äìn‚â°m (Nat.<‚áí‚â§ n‚ÇÅ<n‚ÇÇ)))))))
        (bound/bind/const (1 + 2 * (n‚ÇÇ ‚à∏ n‚ÇÅ)) 0
          (joinLeft/is-bounded _ _ t‚ÇÅ a _ _ t‚ÇÇ n‚ÇÅ<n‚ÇÇ)
          Œª { (violation _ _ _) ‚Üí bound/ret
            ; (valid _) ‚Üí bound/ret })
    ... | tri> ¬¨n‚ÇÅ<n‚ÇÇ n‚ÇÅ‚â¢n‚ÇÇ n‚ÇÅ>n‚ÇÇ =
      Eq.subst
        (IsBounded _ _) {x = 1 + 2 * (n‚ÇÅ ‚à∏ n‚ÇÇ) + 0}
        (Eq.cong suc (Eq.trans (Nat.+-identity ≥ (2 * (n‚ÇÅ ‚à∏ n‚ÇÇ))) (Eq.cong (2 *_) (Eq.cong‚ÇÇ (Œª x y ‚Üí x ‚à∏ y) (Eq.sym (Nat.m‚â•n‚áím‚äîn‚â°m (Nat.<‚áí‚â§ n‚ÇÅ>n‚ÇÇ))) (Eq.sym (Nat.m‚â•n‚áím‚äìn‚â°n (Nat.<‚áí‚â§ n‚ÇÅ>n‚ÇÇ)))))))
        (bound/bind/const (1 + 2 * (n‚ÇÅ ‚à∏ n‚ÇÇ)) 0
          (joinRight/is-bounded _ _ t‚ÇÅ a _ _ t‚ÇÇ n‚ÇÅ>n‚ÇÇ)
          Œª { (violation _ _ _) ‚Üí bound/ret
            ; (valid _) ‚Üí bound/ret })

    join : cmp (Œ† (rbt A) Œª _ ‚Üí Œ† A Œª _ ‚Üí Œ† (rbt A) Œª _ ‚Üí F (rbt A))
    join ‚ü™ t‚ÇÅ ‚ü´ a ‚ü™ t‚ÇÇ ‚ü´ = i-join _ _ t‚ÇÅ a _ _ t‚ÇÇ

    join/is-bounded : ‚àÄ {A} t‚ÇÅ a t‚ÇÇ ‚Üí IsBounded (rbt A) (join t‚ÇÅ a t‚ÇÇ) (1 + (2 * (RBT.n t‚ÇÅ Nat.‚äî RBT.n t‚ÇÇ ‚à∏ RBT.n t‚ÇÅ Nat.‚äì RBT.n t‚ÇÇ)))
    join/is-bounded {A} ‚ü™ t‚ÇÅ ‚ü´ a ‚ü™ t‚ÇÇ ‚ü´ = i-join/is-bounded _ _ t‚ÇÅ a _ _ t‚ÇÇ

    i-rec : {A : tp pos} {X : tp neg} ‚Üí
      cmp
        ( Œ† (U X) Œª _ ‚Üí
          Œ†
            ( U
              ( Œ† color Œª y‚ÇÅ ‚Üí Œ† nat Œª n‚ÇÅ ‚Üí Œ† (irbt A y‚ÇÅ n‚ÇÅ) Œª _ ‚Üí Œ† (U X) Œª _ ‚Üí
                Œ† A Œª _ ‚Üí
                Œ† color Œª y‚ÇÇ ‚Üí Œ† nat Œª n‚ÇÇ ‚Üí Œ† (irbt A y‚ÇÇ n‚ÇÇ) Œª _ ‚Üí Œ† (U X) Œª _ ‚Üí
                X
              )
            ) Œª _ ‚Üí
          Œ† color Œª y ‚Üí Œ† nat Œª n ‚Üí Œ† (irbt A y n) Œª _ ‚Üí
          X
        )
    i-rec {A} {X} z f .black .zero    leaf            = z
    i-rec {A} {X} z f .red   n        (red   t‚ÇÅ a t‚ÇÇ) =
      f
        _ _ t‚ÇÅ (i-rec {A} {X} z f _ _ t‚ÇÅ)
        a
        _ _ t‚ÇÇ (i-rec {A} {X} z f _ _ t‚ÇÇ)
    i-rec {A} {X} z f .black .(suc _) (black t‚ÇÅ a t‚ÇÇ) =
      f
        _ _ t‚ÇÅ (i-rec {A} {X} z f _ _ t‚ÇÅ)
        a
        _ _ t‚ÇÇ (i-rec {A} {X} z f _ _ t‚ÇÇ)

    rec : {A : tp pos} {X : tp neg} ‚Üí
      cmp
        ( Œ† (U X) Œª _ ‚Üí
          Œ† (U (Œ† (rbt A) Œª _ ‚Üí Œ† (U X) Œª _ ‚Üí Œ† A Œª _ ‚Üí Œ† (rbt A) Œª _ ‚Üí Œ† (U X) Œª _ ‚Üí X)) Œª _ ‚Üí
          Œ† (rbt A) Œª _ ‚Üí X
        )
    rec {A} {X} z f ‚ü™ t ‚ü´ =
      i-rec {A} {X}
        z
        (Œª _ _ t‚ÇÅ ih‚ÇÅ a _ _ t‚ÇÇ ih‚ÇÇ ‚Üí f ‚ü™ t‚ÇÅ ‚ü´ ih‚ÇÅ a ‚ü™ t‚ÇÇ ‚ü´ ih‚ÇÇ)
        _ _ t


module Ex/FromList where
  open MSequence RedBlackMSequence

  fromList : cmp (Œ† (list nat) Œª _ ‚Üí F (seq nat))
  fromList [] = empty
  fromList (x ‚à∑ l) =
    bind (F (seq nat)) empty Œª s‚ÇÅ ‚Üí
    bind (F (seq nat)) (fromList l) Œª s‚ÇÇ ‚Üí
    join s‚ÇÅ x s‚ÇÇ

  example : cmp (F (seq nat))
  example = fromList (1 ‚à∑ 2 ‚à∑ 3 ‚à∑ 4 ‚à∑ 5 ‚à∑ [])


module BinarySearchTree
  (MSeq : MSequence)
  (Key : StrictTotalOrder 0‚Ñì 0‚Ñì 0‚Ñì)
  where

  open StrictTotalOrder Key

  ùïÇ : tp pos
  ùïÇ = U (meta (StrictTotalOrder.Carrier Key))

  open MSequence MSeq public

  singleton : cmp (Œ† ùïÇ Œª _ ‚Üí F (seq ùïÇ))
  singleton a =
    bind (F (seq ùïÇ)) empty Œª t ‚Üí
    join t a t

  Split : tp neg
  Split = F (prod‚Å∫ (seq ùïÇ) (prod‚Å∫ (maybe ùïÇ) (seq ùïÇ)))

  split : cmp (Œ† (seq ùïÇ) Œª _ ‚Üí Œ† ùïÇ Œª _ ‚Üí Split)
  split t a =
    rec
      {X = F (prod‚Å∫ (seq ùïÇ) (prod‚Å∫ (maybe ùïÇ) (seq ùïÇ)))}
      (bind Split empty Œª t ‚Üí
        ret (t , nothing , t))
      (Œª t‚ÇÅ ih‚ÇÅ a' t‚ÇÇ ih‚ÇÇ ‚Üí
        case compare a a' of Œª
          { (tri< a<a' ¬¨a‚â°a' ¬¨a>a') ‚Üí
              bind Split ih‚ÇÅ Œª ( t‚ÇÅ‚ÇÅ , a? , t‚ÇÅ‚ÇÇ ) ‚Üí
              bind Split (join t‚ÇÅ‚ÇÇ a' t‚ÇÇ) Œª t ‚Üí
              ret (t‚ÇÅ‚ÇÅ , a? , t)
          ; (tri‚âà ¬¨a<a' a‚â°a' ¬¨a>a') ‚Üí ret (t‚ÇÅ , just a' , t‚ÇÇ)
          ; (tri> ¬¨a<a' ¬¨a‚â°a' a>a') ‚Üí
              bind Split ih‚ÇÇ Œª ( t‚ÇÇ‚ÇÅ , a? , t‚ÇÇ‚ÇÇ ) ‚Üí
              bind Split (join t‚ÇÅ a' t‚ÇÇ‚ÇÅ) Œª t ‚Üí
              ret (t , a? , t‚ÇÇ‚ÇÇ)
          })
      t

  find : cmp (Œ† (seq ùïÇ) Œª _ ‚Üí Œ† ùïÇ Œª _ ‚Üí F (maybe ùïÇ))
  find t a = bind (F (maybe ùïÇ)) (split t a) Œª { (_ , a? , _) ‚Üí ret a? }

  insert : cmp (Œ† (seq ùïÇ) Œª _ ‚Üí Œ† ùïÇ Œª _ ‚Üí F (seq ùïÇ))
  insert t a = bind (F (seq ùïÇ)) (split t a) Œª { (t‚ÇÅ , _ , t‚ÇÇ) ‚Üí join t‚ÇÅ a t‚ÇÇ }


module Ex/NatSet where
  open BinarySearchTree RedBlackMSequence Nat.<-strictTotalOrder

  example : cmp Split
  example =
    bind Split (singleton 1) Œª t‚ÇÅ ‚Üí
    bind Split (insert t‚ÇÅ 2) Œª t‚ÇÅ ‚Üí
    bind Split (singleton 4) Œª t‚ÇÇ ‚Üí
    bind Split (join t‚ÇÅ 3 t‚ÇÇ) Œª t ‚Üí
    split t 2


module Ex/NatStringDict where
  strictTotalOrder : StrictTotalOrder 0‚Ñì 0‚Ñì 0‚Ñì
  strictTotalOrder =
    record
      { Carrier = ‚Ñï √ó String
      ; _‚âà_ = Œª (n‚ÇÅ , _) (n‚ÇÇ , _) ‚Üí n‚ÇÅ ‚â° n‚ÇÇ
      ; _<_ = Œª (n‚ÇÅ , _) (n‚ÇÇ , _) ‚Üí n‚ÇÅ < n‚ÇÇ
      ; isStrictTotalOrder =
          record
            { isEquivalence =
                record
                  { refl = Eq.refl
                  ; sym = Eq.sym
                  ; trans = Eq.trans
                  }
            ; trans = Nat.<-trans
            ; compare = Œª (n‚ÇÅ , _) (n‚ÇÇ , _) ‚Üí Nat.<-cmp n‚ÇÅ n‚ÇÇ
            }
      }

  open BinarySearchTree RedBlackMSequence strictTotalOrder

  example : cmp Split
  example =
    bind Split (singleton (1 , "red")) Œª t‚ÇÅ ‚Üí
    bind Split (insert t‚ÇÅ (2 , "orange")) Œª t‚ÇÅ ‚Üí
    bind Split (singleton (4 , "green")) Œª t‚ÇÇ ‚Üí
    bind Split (join t‚ÇÅ (3 , "yellow") t‚ÇÇ) Œª t ‚Üí
    split t (2 , "")
