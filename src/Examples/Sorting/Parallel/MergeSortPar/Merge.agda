open import Examples.Sorting.Parallel.Comparable

module Examples.Sorting.Parallel.MergeSortPar.Merge (M : Comparable) where

open Comparable M
open import Examples.Sorting.Parallel.Core M

open import Calf costMonoid
open import Calf.Parallel parCostMonoid
open import Calf.Data.Bool
open import Calf.Data.Nat
open import Calf.Data.List
open import Calf.Data.Equality
open import Calf.Data.IsBounded costMonoid

open import Relation.Nullary
open import Relation.Nullary.Negation
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl; module ‚â°-Reasoning)
open import Data.Product using (_√ó_; _,_; ‚àÉ; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.Nat as Nat using (‚Ñï; zero; suc; z‚â§n; s‚â§s; _+_; _*_; ‚åä_/2‚åã; ‚åà_/2‚åâ; pred; _‚äî_)
open import Data.Nat.Properties as N using (module ‚â§-Reasoning)
open import Data.Nat.Log2
open import Data.Nat.PredExp2


open import Examples.Sorting.Parallel.MergeSort.Split M


triple = Œ£‚Å∫ (list A) Œª _ ‚Üí Œ£‚Å∫ A Œª _ ‚Üí (list A)

splitMid/clocked : cmp (Œ† nat Œª k ‚Üí Œ† (list A) Œª l ‚Üí Œ† (U (meta (k Nat.< length l))) Œª _ ‚Üí F triple)
splitMid/clocked zero    (x ‚à∑ xs) (s‚â§s h) = ret ([] , x , xs)
splitMid/clocked (suc k) (x ‚à∑ xs) (s‚â§s h) =
  bind (F triple) (splitMid/clocked k xs h) Œª (l‚ÇÅ , mid , l‚ÇÇ) ‚Üí ret ((x ‚à∑ l‚ÇÅ) , mid , l‚ÇÇ)

splitMid/clocked/correct : ‚àÄ k k' l h ‚Üí k + suc k' ‚â° length l ‚Üí
  ‚óØ (‚àÉ Œª l‚ÇÅ ‚Üí ‚àÉ Œª mid ‚Üí ‚àÉ Œª l‚ÇÇ ‚Üí splitMid/clocked k l h ‚â° ret (l‚ÇÅ , mid , l‚ÇÇ) √ó length l‚ÇÅ ‚â° k √ó length l‚ÇÇ ‚â° k' √ó l ‚â° (l‚ÇÅ ++ [ mid ] ++ l‚ÇÇ))
splitMid/clocked/correct zero    k' (x ‚à∑ xs) (s‚â§s h) refl     u = [] , x , xs , refl , refl , refl , refl
splitMid/clocked/correct (suc k) k' (x ‚à∑ xs) (s‚â§s h) h-length u =
  let (l‚ÇÅ , mid , l‚ÇÇ , ‚â° , h‚ÇÅ , h‚ÇÇ , ‚â°-‚Ü≠) = splitMid/clocked/correct k k' xs h (N.suc-injective h-length) u in
  x ‚à∑ l‚ÇÅ , mid , l‚ÇÇ , Eq.cong (Œª e ‚Üí bind (F triple) e Œª (l‚ÇÅ , mid , l‚ÇÇ) ‚Üí ret ((x ‚à∑ l‚ÇÅ) , mid , l‚ÇÇ)) ‚â° , Eq.cong suc h‚ÇÅ , h‚ÇÇ , Eq.cong (x ‚à∑_) ‚â°-‚Ü≠

splitMid/clocked/cost : cmp (Œ† nat Œª k ‚Üí Œ† (list A) Œª l ‚Üí Œ† (U (meta (k Nat.< length l))) Œª _ ‚Üí cost)
splitMid/clocked/cost _ _ _ = ùüò

splitMid/clocked‚â§splitMid/clocked/cost : ‚àÄ k l h ‚Üí IsBounded triple (splitMid/clocked k l h) (splitMid/clocked/cost k l h)
splitMid/clocked‚â§splitMid/clocked/cost zero    (x ‚à∑ xs) (s‚â§s h) = bound/ret
splitMid/clocked‚â§splitMid/clocked/cost (suc k) (x ‚à∑ xs) (s‚â§s h) =
  bound/bind/const ùüò ùüò (splitMid/clocked‚â§splitMid/clocked/cost k xs h) Œª (l‚ÇÅ , mid , l‚ÇÇ) ‚Üí bound/ret {a = (x ‚à∑ l‚ÇÅ) , mid , l‚ÇÇ}

splitMid : cmp (Œ† (list A) Œª l ‚Üí Œ† (U (meta (0 Nat.< length l))) Œª _ ‚Üí F triple)
splitMid (x ‚à∑ xs) (s‚â§s h) = splitMid/clocked ‚åä length (x ‚à∑ xs) /2‚åã (x ‚à∑ xs) (N.‚åän/2‚åã<n _)

splitMid/correct : ‚àÄ l h ‚Üí
  ‚óØ (‚àÉ Œª l‚ÇÅ ‚Üí ‚àÉ Œª mid ‚Üí ‚àÉ Œª l‚ÇÇ ‚Üí splitMid l h ‚â° ret (l‚ÇÅ , mid , l‚ÇÇ) √ó length l‚ÇÅ Nat.‚â§ ‚åä length l /2‚åã √ó length l‚ÇÇ Nat.‚â§ ‚åä length l /2‚åã √ó l ‚â° (l‚ÇÅ ++ [ mid ] ++ l‚ÇÇ))
splitMid/correct (x ‚à∑ xs) (s‚â§s h) u =
  let (l‚ÇÅ , mid , l‚ÇÇ , ‚â° , h‚ÇÅ , h‚ÇÇ , ‚â°-‚Ü≠) = splitMid/clocked/correct ‚åä length (x ‚à∑ xs) /2‚åã ‚åä pred (length (x ‚à∑ xs)) /2‚åã (x ‚à∑ xs) (N.‚åän/2‚åã<n _)
                                              (let open ‚â°-Reasoning in
                                              begin
                                                ‚åä length (x ‚à∑ xs) /2‚åã + suc ‚åä pred (length (x ‚à∑ xs)) /2‚åã
                                              ‚â°‚ü®‚ü©
                                                ‚åä length (x ‚à∑ xs) /2‚åã + suc ‚åä length xs /2‚åã
                                              ‚â°‚ü®‚ü©
                                                ‚åà length xs /2‚åâ + suc ‚åä length xs /2‚åã
                                              ‚â°‚ü® N.+-suc ‚åà length xs /2‚åâ ‚åä length xs /2‚åã ‚ü©
                                                suc (‚åà length xs /2‚åâ + ‚åä length xs /2‚åã)
                                              ‚â°‚ü® Eq.cong suc (N.+-comm ‚åà length xs /2‚åâ ‚åä length xs /2‚åã) ‚ü©
                                                suc (‚åä length xs /2‚åã + ‚åà length xs /2‚åâ)
                                              ‚â°‚ü® Eq.cong suc (N.‚åän/2‚åã+‚åàn/2‚åâ‚â°n (length xs)) ‚ü©
                                                suc (length xs)
                                              ‚â°‚ü®‚ü©
                                                length (x ‚à∑ xs)
                                              ‚àé) u in
  l‚ÇÅ , mid , l‚ÇÇ , ‚â° , N.‚â§-reflexive h‚ÇÅ , (
    let open ‚â§-Reasoning in
    begin
      length l‚ÇÇ
    ‚â°‚ü® h‚ÇÇ ‚ü©
      ‚åä pred (length (x ‚à∑ xs)) /2‚åã
    ‚â§‚ü® N.‚åän/2‚åã-mono N.pred[n]‚â§n ‚ü©
      ‚åä length (x ‚à∑ xs) /2‚åã
    ‚àé
  ), ‚â°-‚Ü≠

splitMid/cost : cmp (Œ† (list A) Œª l ‚Üí Œ† (U (meta (0 Nat.< length l))) Œª _ ‚Üí cost)
splitMid/cost (x ‚à∑ xs) (s‚â§s h) = splitMid/clocked/cost ‚åä length (x ‚à∑ xs) /2‚åã (x ‚à∑ xs) (N.‚åän/2‚åã<n _)

splitMid‚â§splitMid/cost : ‚àÄ l h ‚Üí IsBounded triple (splitMid l h) (splitMid/cost l h)
splitMid‚â§splitMid/cost (x ‚à∑ xs) (s‚â§s h) = splitMid/clocked‚â§splitMid/clocked/cost ‚åä length (x ‚à∑ xs) /2‚åã (x ‚à∑ xs) (N.‚åän/2‚åã<n _)


splitBy/clocked : cmp (Œ† nat Œª _ ‚Üí Œ† (list A) Œª _ ‚Üí Œ† A Œª _ ‚Üí F pair)
splitBy/clocked/aux : cmp (Œ† nat Œª _ ‚Üí Œ† A Œª _ ‚Üí Œ† (list A) Œª _ ‚Üí Œ† A Œª _ ‚Üí Œ† (list A) Œª _ ‚Üí Œ† bool Œª _ ‚Üí F pair)

splitBy/clocked zero    l        pivot = ret ([] , l)
splitBy/clocked (suc k) []       pivot = ret ([] , [])
splitBy/clocked (suc k) (x ‚à∑ xs) pivot =
  bind (F pair) (splitMid (x ‚à∑ xs) (s‚â§s z‚â§n)) Œª (l‚ÇÅ , mid , l‚ÇÇ) ‚Üí
    bind (F pair) (mid ‚â§·µá pivot) (splitBy/clocked/aux k pivot l‚ÇÅ mid l‚ÇÇ)

splitBy/clocked/aux k pivot l‚ÇÅ mid l‚ÇÇ false =
  bind (F pair) (splitBy/clocked k l‚ÇÅ pivot) Œª (l‚ÇÅ‚ÇÅ , l‚ÇÅ‚ÇÇ) ‚Üí ret (l‚ÇÅ‚ÇÅ , l‚ÇÅ‚ÇÇ ++ mid ‚à∑ l‚ÇÇ)
splitBy/clocked/aux k pivot l‚ÇÅ mid l‚ÇÇ true  =
  bind (F pair) (splitBy/clocked k l‚ÇÇ pivot) Œª (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ) ‚Üí ret (l‚ÇÅ ++ mid ‚à∑ l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ)

splitBy/clocked/correct : ‚àÄ k l pivot ‚Üí ‚åàlog‚ÇÇ suc (length l) ‚åâ Nat.‚â§ k ‚Üí
  ‚óØ (‚àÉ Œª l‚ÇÅ ‚Üí ‚àÉ Œª l‚ÇÇ ‚Üí splitBy/clocked k l pivot ‚â° ret (l‚ÇÅ , l‚ÇÇ) √ó (Sorted l ‚Üí All (_‚â§ pivot) l‚ÇÅ √ó All (pivot ‚â§_) l‚ÇÇ) √ó l ‚â° (l‚ÇÅ ++ l‚ÇÇ))
splitBy/clocked/correct zero    l        pivot h u with ‚åàlog‚ÇÇn‚åâ‚â°0‚áín‚â§1 {suc (length l)} (N.n‚â§0‚áín‚â°0 h)
splitBy/clocked/correct zero    []       pivot h u | s‚â§s z‚â§n = [] , [] , refl , (Œª _ ‚Üí [] , []) , refl
splitBy/clocked/correct (suc k) []       pivot h u = [] , [] , refl , (Œª _ ‚Üí [] , []) , refl
splitBy/clocked/correct (suc k) (x ‚à∑ xs) pivot (s‚â§s h) u with splitMid/correct (x ‚à∑ xs) (s‚â§s z‚â§n) u
splitBy/clocked/correct (suc k) (x ‚à∑ xs) pivot (s‚â§s h) u | (l‚ÇÅ , mid , l‚ÇÇ , ‚â° , h‚ÇÅ , h‚ÇÇ , ‚â°-‚Ü≠) with h-cost mid pivot
splitBy/clocked/correct (suc k) (x ‚à∑ xs) pivot (s‚â§s h) u | (l‚ÇÅ , mid , l‚ÇÇ , ‚â° , h‚ÇÅ , h‚ÇÇ , ‚â°-‚Ü≠) | ‚áì b withCost q [ _ , h-eq ]
  with ‚â§·µá-reflects-‚â§ u (Eq.trans (eq/ref h-eq) (step/ext (F bool) (ret b) q u)) | ‚â§-total mid pivot
splitBy/clocked/correct (suc k) (x ‚à∑ xs) pivot (s‚â§s h) u | (l‚ÇÅ , mid , l‚ÇÇ , ‚â° , h‚ÇÅ , h‚ÇÇ , ‚â°-‚Ü≠) | ‚áì b     withCost q [ _ , h-eq ] | of‚Åø ¬¨p | inj‚ÇÅ mid‚â§pivot = contradiction mid‚â§pivot ¬¨p
splitBy/clocked/correct (suc k) (x ‚à∑ xs) pivot (s‚â§s h) u | (l‚ÇÅ , mid , l‚ÇÇ , ‚â° , h‚ÇÅ , h‚ÇÇ , ‚â°-‚Ü≠) | ‚áì false withCost q [ _ , h-eq ] | of‚Åø ¬¨p | inj‚ÇÇ pivot‚â§mid =
  let (l‚ÇÅ‚ÇÅ , l‚ÇÅ‚ÇÇ , ‚â°' , h-sorted , ‚â°-‚Ü≠') = splitBy/clocked/correct k l‚ÇÅ pivot (
                                              let open ‚â§-Reasoning in
                                              begin
                                                ‚åàlog‚ÇÇ suc (length l‚ÇÅ) ‚åâ
                                              ‚â§‚ü® log‚ÇÇ-mono (s‚â§s h‚ÇÅ) ‚ü©
                                                ‚åàlog‚ÇÇ suc ‚åä length (x ‚à∑ xs) /2‚åã ‚åâ
                                              ‚â§‚ü® h ‚ü©
                                                k
                                              ‚àé
                                            ) u in
  l‚ÇÅ‚ÇÅ , l‚ÇÅ‚ÇÇ ++ mid ‚à∑ l‚ÇÇ , (
    let open ‚â°-Reasoning in
    begin
      splitBy/clocked (suc k) (x ‚à∑ xs) pivot
    ‚â°‚ü®‚ü©
      (bind (F pair) (splitMid (x ‚à∑ xs) (s‚â§s z‚â§n)) Œª (l‚ÇÅ , mid , l‚ÇÇ) ‚Üí
        bind (F pair) (mid ‚â§·µá pivot) (splitBy/clocked/aux k pivot l‚ÇÅ mid l‚ÇÇ))
    ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F pair) e _) (‚â°) ‚ü©
      bind (F pair) (mid ‚â§·µá pivot) (splitBy/clocked/aux k pivot l‚ÇÅ mid l‚ÇÇ)
    ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F pair) e (splitBy/clocked/aux k pivot l‚ÇÅ mid l‚ÇÇ)) (eq/ref h-eq) ‚ü©
      step (F pair) q (splitBy/clocked/aux k pivot l‚ÇÅ mid l‚ÇÇ false)
    ‚â°‚ü® step/ext (F pair) (splitBy/clocked/aux k pivot l‚ÇÅ mid l‚ÇÇ false) q u ‚ü©
      splitBy/clocked/aux k pivot l‚ÇÅ mid l‚ÇÇ false
    ‚â°‚ü®‚ü©
      (bind (F pair) (splitBy/clocked k l‚ÇÅ pivot) Œª (l‚ÇÅ‚ÇÅ , l‚ÇÅ‚ÇÇ) ‚Üí ret (l‚ÇÅ‚ÇÅ , l‚ÇÅ‚ÇÇ ++ mid ‚à∑ l‚ÇÇ))
    ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F pair) e Œª (l‚ÇÅ‚ÇÅ , l‚ÇÅ‚ÇÇ) ‚Üí ret (l‚ÇÅ‚ÇÅ , l‚ÇÅ‚ÇÇ ++ mid ‚à∑ l‚ÇÇ)) ‚â°' ‚ü©
      ret (l‚ÇÅ‚ÇÅ , l‚ÇÅ‚ÇÇ ++ mid ‚à∑ l‚ÇÇ)
    ‚àé
  ) , (
    Œª sorted ‚Üí
      let sorted' = Eq.subst Sorted ‚â°-‚Ü≠ sorted in
      let (h‚ÇÅ‚ÇÅ , h‚ÇÅ‚ÇÇ) = h-sorted (++‚ÅªÀ° l‚ÇÅ sorted') in
      h‚ÇÅ‚ÇÅ , ++‚Å∫-All h‚ÇÅ‚ÇÇ (pivot‚â§mid ‚à∑ ‚â§-‚â§* pivot‚â§mid (uncons‚ÇÅ (++‚Åª ≥ l‚ÇÅ sorted')))
  ) , (
    let open ‚â°-Reasoning in
    begin
      (x ‚à∑ xs)
    ‚â°‚ü® ‚â°-‚Ü≠ ‚ü©
      l‚ÇÅ ++ mid ‚à∑ l‚ÇÇ
    ‚â°‚ü® Eq.cong (_++ (mid ‚à∑ l‚ÇÇ)) ‚â°-‚Ü≠' ‚ü©
      (l‚ÇÅ‚ÇÅ ++ l‚ÇÅ‚ÇÇ) ++ mid ‚à∑ l‚ÇÇ
    ‚â°‚ü® ++-assoc l‚ÇÅ‚ÇÅ l‚ÇÅ‚ÇÇ (mid ‚à∑ l‚ÇÇ) ‚ü©
      l‚ÇÅ‚ÇÅ ++ (l‚ÇÅ‚ÇÇ ++ mid ‚à∑ l‚ÇÇ)
    ‚àé
  )
splitBy/clocked/correct (suc k) (x ‚à∑ xs) pivot (s‚â§s h) u | (l‚ÇÅ , mid , l‚ÇÇ , ‚â° , h‚ÇÅ , h‚ÇÇ , ‚â°-‚Ü≠) | ‚áì true withCost q [ _ , h-eq ] | of ∏ p  | _              =
  let (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ , ‚â°' , h-sorted , ‚â°-‚Ü≠') = splitBy/clocked/correct k l‚ÇÇ pivot (
                                              let open ‚â§-Reasoning in
                                              begin
                                                ‚åàlog‚ÇÇ suc (length l‚ÇÇ) ‚åâ
                                              ‚â§‚ü® log‚ÇÇ-mono (s‚â§s h‚ÇÇ) ‚ü©
                                                ‚åàlog‚ÇÇ suc ‚åä length (x ‚à∑ xs) /2‚åã ‚åâ
                                              ‚â§‚ü® h ‚ü©
                                                k
                                              ‚àé
                                            ) u in
  l‚ÇÅ ++ mid ‚à∑ l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ , (
    let open ‚â°-Reasoning in
    begin
      splitBy/clocked (suc k) (x ‚à∑ xs) pivot
    ‚â°‚ü®‚ü©
      (bind (F pair) (splitMid (x ‚à∑ xs) (s‚â§s z‚â§n)) Œª (l‚ÇÅ , mid , l‚ÇÇ) ‚Üí
        bind (F pair) (mid ‚â§·µá pivot) (splitBy/clocked/aux k pivot l‚ÇÅ mid l‚ÇÇ))
    ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F pair) e _) (‚â°) ‚ü©
      bind (F pair) (mid ‚â§·µá pivot) (splitBy/clocked/aux k pivot l‚ÇÅ mid l‚ÇÇ)
    ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F pair) e (splitBy/clocked/aux k pivot l‚ÇÅ mid l‚ÇÇ)) (eq/ref h-eq) ‚ü©
      step (F pair) q (splitBy/clocked/aux k pivot l‚ÇÅ mid l‚ÇÇ true)
    ‚â°‚ü® step/ext (F pair) (splitBy/clocked/aux k pivot l‚ÇÅ mid l‚ÇÇ true) q u ‚ü©
      splitBy/clocked/aux k pivot l‚ÇÅ mid l‚ÇÇ true
    ‚â°‚ü®‚ü©
      (bind (F pair) (splitBy/clocked k l‚ÇÇ pivot) Œª (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ) ‚Üí ret (l‚ÇÅ ++ mid ‚à∑ l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ))
    ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F pair) e Œª (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ) ‚Üí ret (l‚ÇÅ ++ mid ‚à∑ l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ)) ‚â°' ‚ü©
      ret (l‚ÇÅ ++ mid ‚à∑ l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ)
    ‚àé
  ) , (
    Œª sorted ‚Üí
      let sorted' = Eq.subst Sorted ‚â°-‚Ü≠ sorted in
      let (h‚ÇÇ‚ÇÅ , h‚ÇÇ‚ÇÇ) = h-sorted (uncons‚ÇÇ (++‚Åª ≥ l‚ÇÅ sorted')) in
      ++‚Å∫-All
        (map (Œª h ‚Üí ‚â§-trans h p) (split-sorted‚ÇÅ l‚ÇÅ (++‚ÅªÀ° (l‚ÇÅ ‚à∑ ≥ mid) (Eq.subst Sorted (Eq.sym (++-assoc l‚ÇÅ [ mid ] l‚ÇÇ)) sorted'))))
        (p ‚à∑ h‚ÇÇ‚ÇÅ) ,
      h‚ÇÇ‚ÇÇ
  ) , (
    let open ‚â°-Reasoning in
    begin
      (x ‚à∑ xs)
    ‚â°‚ü® ‚â°-‚Ü≠ ‚ü©
      l‚ÇÅ ++ mid ‚à∑ l‚ÇÇ
    ‚â°‚ü® Eq.cong (Œª l‚ÇÇ ‚Üí l‚ÇÅ ++ mid ‚à∑ l‚ÇÇ) ‚â°-‚Ü≠' ‚ü©
      l‚ÇÅ ++ mid ‚à∑ (l‚ÇÇ‚ÇÅ ++ l‚ÇÇ‚ÇÇ)
    ‚â°Àò‚ü® ++-assoc l‚ÇÅ (mid ‚à∑ l‚ÇÇ‚ÇÅ) l‚ÇÇ‚ÇÇ ‚ü©
      (l‚ÇÅ ++ mid ‚à∑ l‚ÇÇ‚ÇÅ) ++ l‚ÇÇ‚ÇÇ
    ‚àé
  )

splitBy/clocked/cost : cmp (Œ† nat Œª _ ‚Üí Œ† (list A) Œª _ ‚Üí Œ† A Œª _ ‚Üí cost)
splitBy/clocked/cost/aux : cmp (Œ† nat Œª _ ‚Üí Œ† A Œª _ ‚Üí Œ† (list A) Œª _ ‚Üí Œ† A Œª _ ‚Üí Œ† (list A) Œª _ ‚Üí Œ† bool Œª _ ‚Üí cost)

splitBy/clocked/cost zero    l        pivot = ùüò
splitBy/clocked/cost (suc k) []       pivot = ùüò
splitBy/clocked/cost (suc k) (x ‚à∑ xs) pivot =
  bind cost (splitMid (x ‚à∑ xs) (s‚â§s z‚â§n)) Œª (l‚ÇÅ , mid , l‚ÇÇ) ‚Üí splitMid/cost (x ‚à∑ xs) (s‚â§s z‚â§n) ‚äï
    bind cost (mid ‚â§·µá pivot) Œª b ‚Üí (1 , 1) ‚äï splitBy/clocked/cost/aux k pivot l‚ÇÅ mid l‚ÇÇ b

splitBy/clocked/cost/aux k pivot l‚ÇÅ mid l‚ÇÇ false =
  bind cost (splitBy/clocked k l‚ÇÅ pivot) Œª (l‚ÇÅ‚ÇÅ , l‚ÇÅ‚ÇÇ) ‚Üí splitBy/clocked/cost k l‚ÇÅ pivot ‚äï ùüò
splitBy/clocked/cost/aux k pivot l‚ÇÅ mid l‚ÇÇ true  =
  bind cost (splitBy/clocked k l‚ÇÇ pivot) Œª (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ) ‚Üí splitBy/clocked/cost k l‚ÇÇ pivot ‚äï ùüò

splitBy/clocked/cost/closed : cmp (Œ† nat Œª _ ‚Üí Œ† (list A) Œª _ ‚Üí Œ† A Œª _ ‚Üí cost)
splitBy/clocked/cost/closed k _ _ = k , k

splitBy/clocked/cost‚â§splitBy/clocked/cost/closed : ‚àÄ k l pivot ‚Üí ‚åàlog‚ÇÇ suc (length l) ‚åâ Nat.‚â§ k ‚Üí
  ‚óØ (splitBy/clocked/cost k l pivot ‚â§‚Çö splitBy/clocked/cost/closed k l pivot)
splitBy/clocked/cost/aux‚â§k : ‚àÄ k pivot l‚ÇÅ mid l‚ÇÇ b ‚Üí ‚åàlog‚ÇÇ suc (length l‚ÇÅ) ‚åâ Nat.‚â§ k ‚Üí ‚åàlog‚ÇÇ suc (length l‚ÇÇ) ‚åâ Nat.‚â§ k ‚Üí
  ‚óØ (splitBy/clocked/cost/aux k pivot l‚ÇÅ mid l‚ÇÇ b ‚â§‚Çö (k , k))

splitBy/clocked/cost‚â§splitBy/clocked/cost/closed zero    l        pivot h u = z‚â§n , z‚â§n
splitBy/clocked/cost‚â§splitBy/clocked/cost/closed (suc k) []       pivot h u = z‚â§n , z‚â§n
splitBy/clocked/cost‚â§splitBy/clocked/cost/closed (suc k) (x ‚à∑ xs) pivot (s‚â§s h) u with splitMid/correct (x ‚à∑ xs) (s‚â§s z‚â§n) u
... | (l‚ÇÅ , mid , l‚ÇÇ , ‚â° , h‚ÇÅ , h‚ÇÇ , ‚â°-‚Ü≠) with h-cost mid pivot
... | ‚áì b withCost q [ _ , h-eq ] =
  begin
    splitBy/clocked/cost (suc k) (x ‚à∑ xs) pivot
  ‚â°‚ü®‚ü©
    (bind cost (splitMid (x ‚à∑ xs) (s‚â§s z‚â§n)) Œª (l‚ÇÅ , mid , l‚ÇÇ) ‚Üí splitMid/cost (x ‚à∑ xs) (s‚â§s z‚â§n) ‚äï
      bind cost (mid ‚â§·µá pivot) Œª b ‚Üí (1 , 1) ‚äï splitBy/clocked/cost/aux k pivot l‚ÇÅ mid l‚ÇÇ b)
  ‚â°‚ü® Eq.cong (Œª e ‚Üí bind cost e _) (‚â°) ‚ü©
    (splitMid/cost (x ‚à∑ xs) (s‚â§s z‚â§n) ‚äï
      bind cost (mid ‚â§·µá pivot) Œª b ‚Üí (1 , 1) ‚äï splitBy/clocked/cost/aux k pivot l‚ÇÅ mid l‚ÇÇ b)
  ‚â°‚ü®‚ü©
    (ùüò ‚äï
      bind cost (mid ‚â§·µá pivot) Œª b ‚Üí (1 , 1) ‚äï splitBy/clocked/cost/aux k pivot l‚ÇÅ mid l‚ÇÇ b)
  ‚â°‚ü® ‚äï-identityÀ° _ ‚ü©
    (bind cost (mid ‚â§·µá pivot) Œª b ‚Üí (1 , 1) ‚äï splitBy/clocked/cost/aux k pivot l‚ÇÅ mid l‚ÇÇ b)
  ‚â°‚ü® Eq.cong (Œª e ‚Üí bind cost e Œª b ‚Üí (1 , 1) ‚äï splitBy/clocked/cost/aux k pivot l‚ÇÅ mid l‚ÇÇ b) (eq/ref h-eq) ‚ü©
    step cost q ((1 , 1) ‚äï splitBy/clocked/cost/aux k pivot l‚ÇÅ mid l‚ÇÇ b)
  ‚â°‚ü® step/ext cost _ q u ‚ü©
    (1 , 1) ‚äï splitBy/clocked/cost/aux k pivot l‚ÇÅ mid l‚ÇÇ b
  ‚â§‚ü®
    ‚äï-mono ≥-‚â§ (1 , 1) (
      splitBy/clocked/cost/aux‚â§k k pivot l‚ÇÅ mid l‚ÇÇ b
        (N.‚â§-trans (log‚ÇÇ-mono (s‚â§s h‚ÇÅ)) h)
        (N.‚â§-trans (log‚ÇÇ-mono (s‚â§s h‚ÇÇ)) h)
        u
    )
  ‚ü©
    (1 , 1) ‚äï (k , k)
  ‚â°‚ü®‚ü©
    (suc k , suc k)
  ‚â°‚ü®‚ü©
    splitBy/clocked/cost/closed (suc k) (x ‚à∑ xs) pivot
  ‚àé
    where open ‚â§‚Çö-Reasoning

splitBy/clocked/cost/aux‚â§k k pivot l‚ÇÅ mid l‚ÇÇ false h‚ÇÅ h‚ÇÇ u =
  let (l‚ÇÅ‚ÇÅ , l‚ÇÅ‚ÇÇ , ‚â°' , _ , ‚â°-‚Ü≠') = splitBy/clocked/correct k l‚ÇÅ pivot h‚ÇÅ u in
  begin
    splitBy/clocked/cost/aux k pivot l‚ÇÅ mid l‚ÇÇ false
  ‚â°‚ü®‚ü©
    (bind cost (splitBy/clocked k l‚ÇÅ pivot) Œª (l‚ÇÅ‚ÇÅ , l‚ÇÅ‚ÇÇ) ‚Üí splitBy/clocked/cost k l‚ÇÅ pivot ‚äï ùüò)
  ‚â°‚ü® Eq.cong (Œª e ‚Üí bind cost e Œª (l‚ÇÅ‚ÇÅ , l‚ÇÅ‚ÇÇ) ‚Üí splitBy/clocked/cost k l‚ÇÅ pivot ‚äï ùüò) ‚â°' ‚ü©
    splitBy/clocked/cost k l‚ÇÅ pivot ‚äï ùüò
  ‚â°‚ü® ‚äï-identity ≥ _ ‚ü©
    splitBy/clocked/cost k l‚ÇÅ pivot
  ‚â§‚ü® splitBy/clocked/cost‚â§splitBy/clocked/cost/closed k l‚ÇÅ pivot h‚ÇÅ u ‚ü©
    (k , k)
  ‚àé
    where open ‚â§‚Çö-Reasoning
splitBy/clocked/cost/aux‚â§k k pivot l‚ÇÅ mid l‚ÇÇ true  h‚ÇÅ h‚ÇÇ u =
  let (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ , ‚â°' , _ , ‚â°-‚Ü≠') = splitBy/clocked/correct k l‚ÇÇ pivot h‚ÇÇ u in
  begin
    splitBy/clocked/cost/aux k pivot l‚ÇÅ mid l‚ÇÇ true
  ‚â°‚ü®‚ü©
    (bind cost (splitBy/clocked k l‚ÇÇ pivot) Œª (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ) ‚Üí splitBy/clocked/cost k l‚ÇÇ pivot ‚äï ùüò)
  ‚â°‚ü® Eq.cong (Œª e ‚Üí bind cost e Œª (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ) ‚Üí splitBy/clocked/cost k l‚ÇÇ pivot ‚äï ùüò) ‚â°' ‚ü©
    splitBy/clocked/cost k l‚ÇÇ pivot ‚äï ùüò
  ‚â°‚ü® ‚äï-identity ≥ _ ‚ü©
    splitBy/clocked/cost k l‚ÇÇ pivot
  ‚â§‚ü® splitBy/clocked/cost‚â§splitBy/clocked/cost/closed k l‚ÇÇ pivot h‚ÇÇ u ‚ü©
    (k , k)
  ‚àé
    where open ‚â§‚Çö-Reasoning

splitBy/clocked‚â§splitBy/clocked/cost : ‚àÄ k l pivot ‚Üí IsBounded pair (splitBy/clocked k l pivot) (splitBy/clocked/cost k l pivot)
splitBy/clocked‚â§splitBy/clocked/cost zero    l        pivot = bound/ret
splitBy/clocked‚â§splitBy/clocked/cost (suc k) []       pivot = bound/ret
splitBy/clocked‚â§splitBy/clocked/cost (suc k) (x ‚à∑ xs) pivot =
  bound/bind {e = splitMid (x ‚à∑ xs) (s‚â§s z‚â§n)} (splitMid/cost (x ‚à∑ xs) (s‚â§s z‚â§n)) _ (splitMid‚â§splitMid/cost (x ‚à∑ xs) (s‚â§s z‚â§n)) Œª (l‚ÇÅ , mid , l‚ÇÇ) ‚Üí
    bound/bind (1 , 1) _ (h-cost mid pivot)
      Œª { false ‚Üí bound/bind (splitBy/clocked/cost k l‚ÇÅ pivot) (Œª _ ‚Üí ùüò) (splitBy/clocked‚â§splitBy/clocked/cost k l‚ÇÅ pivot) Œª (l‚ÇÅ‚ÇÅ , l‚ÇÅ‚ÇÇ) ‚Üí bound/ret {a = l‚ÇÅ‚ÇÅ , l‚ÇÅ‚ÇÇ ++ mid ‚à∑ l‚ÇÇ}
        ; true  ‚Üí bound/bind (splitBy/clocked/cost k l‚ÇÇ pivot) (Œª _ ‚Üí ùüò) (splitBy/clocked‚â§splitBy/clocked/cost k l‚ÇÇ pivot) Œª (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ) ‚Üí bound/ret {a = l‚ÇÅ ++ mid ‚à∑ l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ} }

splitBy/clocked‚â§splitBy/clocked/cost/closed : ‚àÄ k l pivot ‚Üí ‚åàlog‚ÇÇ suc (length l) ‚åâ Nat.‚â§ k ‚Üí IsBounded pair (splitBy/clocked k l pivot) (splitBy/clocked/cost/closed k l pivot)
splitBy/clocked‚â§splitBy/clocked/cost/closed k l pivot h = bound/relax (splitBy/clocked/cost‚â§splitBy/clocked/cost/closed k l pivot h) (splitBy/clocked‚â§splitBy/clocked/cost k l pivot)

splitBy : cmp (Œ† (list A) Œª _ ‚Üí Œ† A Œª _ ‚Üí F pair)
splitBy l pivot = splitBy/clocked ‚åàlog‚ÇÇ suc (length l) ‚åâ l pivot

splitBy/correct : ‚àÄ l pivot ‚Üí
  ‚óØ (‚àÉ Œª l‚ÇÅ ‚Üí ‚àÉ Œª l‚ÇÇ ‚Üí splitBy l pivot ‚â° ret (l‚ÇÅ , l‚ÇÇ) √ó (Sorted l ‚Üí All (_‚â§ pivot) l‚ÇÅ √ó All (pivot ‚â§_) l‚ÇÇ) √ó l ‚â° (l‚ÇÅ ++ l‚ÇÇ))
splitBy/correct l pivot = splitBy/clocked/correct ‚åàlog‚ÇÇ suc (length l) ‚åâ l pivot N.‚â§-refl

splitBy/cost : cmp (Œ† (list A) Œª _ ‚Üí Œ† A Œª _ ‚Üí cost)
splitBy/cost l pivot = splitBy/clocked/cost ‚åàlog‚ÇÇ suc (length l) ‚åâ l pivot

splitBy/cost/closed : cmp (Œ† (list A) Œª _ ‚Üí Œ† A Œª _ ‚Üí cost)
splitBy/cost/closed l pivot = splitBy/clocked/cost/closed ‚åàlog‚ÇÇ suc (length l) ‚åâ l pivot

splitBy‚â§splitBy/cost : ‚àÄ l pivot ‚Üí IsBounded pair (splitBy l pivot) (splitBy/cost l pivot)
splitBy‚â§splitBy/cost l pivot = splitBy/clocked‚â§splitBy/clocked/cost ‚åàlog‚ÇÇ suc (length l) ‚åâ l pivot

splitBy‚â§splitBy/cost/closed : ‚àÄ l pivot ‚Üí IsBounded pair (splitBy l pivot) (splitBy/cost/closed l pivot)
splitBy‚â§splitBy/cost/closed l pivot = splitBy/clocked‚â§splitBy/clocked/cost/closed ‚åàlog‚ÇÇ suc (length l) ‚åâ l pivot N.‚â§-refl


merge/clocked : cmp (Œ† nat Œª _ ‚Üí Œ† pair Œª _ ‚Üí F (list A))
merge/clocked zero    (l‚ÇÅ     , l‚ÇÇ) = ret (l‚ÇÅ ++ l‚ÇÇ)
merge/clocked (suc k) ([]     , l‚ÇÇ) = ret l‚ÇÇ
merge/clocked (suc k) (x ‚à∑ l‚ÇÅ , l‚ÇÇ) =
  bind (F (list A)) (splitMid (x ‚à∑ l‚ÇÅ) (s‚â§s z‚â§n)) Œª (l‚ÇÅ‚ÇÅ , pivot , l‚ÇÅ‚ÇÇ) ‚Üí
    bind (F (list A)) (splitBy l‚ÇÇ pivot) Œª (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ) ‚Üí
      bind (F (list A)) (merge/clocked k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚à• merge/clocked k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) Œª (l‚ÇÅ' , l‚ÇÇ') ‚Üí
        ret (l‚ÇÅ' ++ pivot ‚à∑ l‚ÇÇ')

merge/clocked/correct : ‚àÄ k l‚ÇÅ l‚ÇÇ ‚Üí ‚åàlog‚ÇÇ suc (length l‚ÇÅ) ‚åâ Nat.‚â§ k ‚Üí
  ‚óØ (‚àÉ Œª l ‚Üí merge/clocked k (l‚ÇÅ , l‚ÇÇ) ‚â° ret l √ó (Sorted l‚ÇÅ ‚Üí Sorted l‚ÇÇ ‚Üí SortedOf (l‚ÇÅ ++ l‚ÇÇ) l))
merge/clocked/correct zero    l‚ÇÅ       l‚ÇÇ h-clock u with ‚åàlog‚ÇÇn‚åâ‚â°0‚áín‚â§1 {suc (length l‚ÇÅ)} (N.n‚â§0‚áín‚â°0 h-clock)
merge/clocked/correct zero    []       l‚ÇÇ h-clock u | s‚â§s z‚â§n = l‚ÇÇ , refl , (Œª sorted‚ÇÅ sorted‚ÇÇ ‚Üí refl , sorted‚ÇÇ)
merge/clocked/correct (suc k) []       l‚ÇÇ h-clock u = l‚ÇÇ , refl , (Œª sorted‚ÇÅ sorted‚ÇÇ ‚Üí refl , sorted‚ÇÇ)
merge/clocked/correct (suc k) (x ‚à∑ l‚ÇÅ) l‚ÇÇ h-clock u =
  let (l‚ÇÅ‚ÇÅ , pivot , l‚ÇÅ‚ÇÇ , ‚â° , h‚ÇÅ‚ÇÅ , h‚ÇÅ‚ÇÇ , ‚â°-‚Ü≠) = splitMid/correct (x ‚à∑ l‚ÇÅ) (s‚â§s z‚â§n) u in
  let (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ , ‚â°' , h-sorted‚ÇÇ , ‚â°-‚Ü≠') = splitBy/correct l‚ÇÇ pivot u in
  let (l‚ÇÅ' , ‚â°‚ÇÅ' , h-sorted‚ÇÅ') = merge/clocked/correct k l‚ÇÅ‚ÇÅ l‚ÇÇ‚ÇÅ
                                  (let open ‚â§-Reasoning in
                                  begin
                                    ‚åàlog‚ÇÇ suc (length l‚ÇÅ‚ÇÅ) ‚åâ
                                  ‚â§‚ü® log‚ÇÇ-mono (s‚â§s h‚ÇÅ‚ÇÅ) ‚ü©
                                    ‚åàlog‚ÇÇ ‚åà suc (length (x ‚à∑ l‚ÇÅ)) /2‚åâ ‚åâ
                                  ‚â§‚ü® log‚ÇÇ-suc (suc (length (x ‚à∑ l‚ÇÅ))) h-clock ‚ü©
                                    k
                                  ‚àé)
                                  u in
  let (l‚ÇÇ' , ‚â°‚ÇÇ' , h-sorted‚ÇÇ') = merge/clocked/correct k l‚ÇÅ‚ÇÇ l‚ÇÇ‚ÇÇ
                                  (let open ‚â§-Reasoning in
                                  begin
                                    ‚åàlog‚ÇÇ suc (length l‚ÇÅ‚ÇÇ) ‚åâ
                                  ‚â§‚ü® log‚ÇÇ-mono (s‚â§s h‚ÇÅ‚ÇÇ) ‚ü©
                                    ‚åàlog‚ÇÇ ‚åà suc (length (x ‚à∑ l‚ÇÅ)) /2‚åâ ‚åâ
                                  ‚â§‚ü® log‚ÇÇ-suc (suc (length (x ‚à∑ l‚ÇÅ))) h-clock ‚ü©
                                    k
                                  ‚àé)
                                  u in
  l‚ÇÅ' ++ pivot ‚à∑ l‚ÇÇ' , (
    let open ‚â°-Reasoning in
    begin
      merge/clocked (suc k) (x ‚à∑ l‚ÇÅ , l‚ÇÇ)
    ‚â°‚ü®‚ü©
      (bind (F (list A)) (splitMid (x ‚à∑ l‚ÇÅ) (s‚â§s z‚â§n)) Œª (l‚ÇÅ‚ÇÅ , pivot , l‚ÇÅ‚ÇÇ) ‚Üí
        bind (F (list A)) (splitBy l‚ÇÇ pivot) Œª (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ) ‚Üí
          bind (F (list A)) (merge/clocked k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚à• merge/clocked k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) Œª (l‚ÇÅ' , l‚ÇÇ') ‚Üí
            ret (l‚ÇÅ' ++ pivot ‚à∑ l‚ÇÇ'))
    ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F (list A)) e _) (‚â°) ‚ü©
      (bind (F (list A)) (splitBy l‚ÇÇ pivot) Œª (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ) ‚Üí
        bind (F (list A)) (merge/clocked k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚à• merge/clocked k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) Œª (l‚ÇÅ' , l‚ÇÇ') ‚Üí
          ret (l‚ÇÅ' ++ pivot ‚à∑ l‚ÇÇ'))
    ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F (list A)) e _) (‚â°') ‚ü©
      (bind (F (list A)) (merge/clocked k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚à• merge/clocked k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) Œª (l‚ÇÅ' , l‚ÇÇ') ‚Üí
        ret (l‚ÇÅ' ++ pivot ‚à∑ l‚ÇÇ'))
    ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F (list A)) e _) (Eq.cong‚ÇÇ _‚à•_ ‚â°‚ÇÅ' ‚â°‚ÇÇ') ‚ü©
      ret (l‚ÇÅ' ++ pivot ‚à∑ l‚ÇÇ')
    ‚àé
  ) ,
  Œª sorted‚ÇÅ sorted‚ÇÇ ‚Üí
    let (h‚ÇÇ‚ÇÅ , h‚ÇÇ‚ÇÇ) = h-sorted‚ÇÇ sorted‚ÇÇ in
    let sorted‚ÇÅ = Eq.subst Sorted ‚â°-‚Ü≠  sorted‚ÇÅ
        sorted‚ÇÇ = Eq.subst Sorted ‚â°-‚Ü≠' sorted‚ÇÇ in
    let (‚Ü≠‚ÇÅ' , sorted‚ÇÅ') = h-sorted‚ÇÅ'          (++‚ÅªÀ° l‚ÇÅ‚ÇÅ sorted‚ÇÅ)  (++‚ÅªÀ° l‚ÇÇ‚ÇÅ sorted‚ÇÇ)
        (‚Ü≠‚ÇÇ' , sorted‚ÇÇ') = h-sorted‚ÇÇ' (uncons‚ÇÇ (++‚Åª ≥ l‚ÇÅ‚ÇÅ sorted‚ÇÅ)) (++‚Åª ≥ l‚ÇÇ‚ÇÅ sorted‚ÇÇ) in
    (
      let open PermutationReasoning in
      begin
        (x ‚à∑ l‚ÇÅ) ++ l‚ÇÇ
      ‚â°‚ü® Eq.cong‚ÇÇ (_++_) ‚â°-‚Ü≠ ‚â°-‚Ü≠' ‚ü©
        (l‚ÇÅ‚ÇÅ ++ pivot ‚à∑ l‚ÇÅ‚ÇÇ) ++ (l‚ÇÇ‚ÇÅ ++ l‚ÇÇ‚ÇÇ)
      ‚â°‚ü® ++-assoc l‚ÇÅ‚ÇÅ (pivot ‚à∑ l‚ÇÅ‚ÇÇ) (l‚ÇÇ‚ÇÅ ++ l‚ÇÇ‚ÇÇ) ‚ü©
        l‚ÇÅ‚ÇÅ ++ (pivot ‚à∑ l‚ÇÅ‚ÇÇ ++ (l‚ÇÇ‚ÇÅ ++ l‚ÇÇ‚ÇÇ))
      ‚Ü≠‚ü® ++‚Å∫À°-‚Ü≠ l‚ÇÅ‚ÇÅ (++‚Å∫À°-‚Ü≠ (pivot ‚à∑ l‚ÇÅ‚ÇÇ) (++-comm-‚Ü≠ l‚ÇÇ‚ÇÅ l‚ÇÇ‚ÇÇ)) ‚ü©
        l‚ÇÅ‚ÇÅ ++ (pivot ‚à∑ l‚ÇÅ‚ÇÇ ++ (l‚ÇÇ‚ÇÇ ++ l‚ÇÇ‚ÇÅ))
      ‚â°Àò‚ü® Eq.cong (l‚ÇÅ‚ÇÅ ++_) (++-assoc (pivot ‚à∑ l‚ÇÅ‚ÇÇ) l‚ÇÇ‚ÇÇ l‚ÇÇ‚ÇÅ) ‚ü©
        l‚ÇÅ‚ÇÅ ++ ((pivot ‚à∑ l‚ÇÅ‚ÇÇ ++ l‚ÇÇ‚ÇÇ) ++ l‚ÇÇ‚ÇÅ)
      ‚Ü≠‚ü® ++‚Å∫À°-‚Ü≠ l‚ÇÅ‚ÇÅ (++-comm-‚Ü≠ (pivot ‚à∑ l‚ÇÅ‚ÇÇ ++ l‚ÇÇ‚ÇÇ) l‚ÇÇ‚ÇÅ) ‚ü©
        l‚ÇÅ‚ÇÅ ++ (l‚ÇÇ‚ÇÅ ++ (pivot ‚à∑ l‚ÇÅ‚ÇÇ ++ l‚ÇÇ‚ÇÇ))
      ‚â°Àò‚ü® ++-assoc l‚ÇÅ‚ÇÅ l‚ÇÇ‚ÇÅ (pivot ‚à∑ l‚ÇÅ‚ÇÇ ++ l‚ÇÇ‚ÇÇ) ‚ü©
        (l‚ÇÅ‚ÇÅ ++ l‚ÇÇ‚ÇÅ) ++ (pivot ‚à∑ l‚ÇÅ‚ÇÇ ++ l‚ÇÇ‚ÇÇ)
      ‚â°‚ü®‚ü©
        (l‚ÇÅ‚ÇÅ ++ l‚ÇÇ‚ÇÅ) ++ pivot ‚à∑ (l‚ÇÅ‚ÇÇ ++ l‚ÇÇ‚ÇÇ)
      ‚Ü≠‚ü® ++‚Å∫-‚Ü≠ ‚Ü≠‚ÇÅ' (prep pivot ‚Ü≠‚ÇÇ') ‚ü©
        l‚ÇÅ' ++ pivot ‚à∑ l‚ÇÇ'
      ‚àé
    ) ,
    join-sorted
      sorted‚ÇÅ'
      sorted‚ÇÇ'
      (All-resp-‚Ü≠ ‚Ü≠‚ÇÅ' (++‚Å∫-All (split-sorted‚ÇÅ l‚ÇÅ‚ÇÅ (++‚ÅªÀ° (l‚ÇÅ‚ÇÅ ‚à∑ ≥ pivot) (Eq.subst Sorted (Eq.sym (++-assoc l‚ÇÅ‚ÇÅ [ pivot ] l‚ÇÅ‚ÇÇ)) sorted‚ÇÅ))) h‚ÇÇ‚ÇÅ))
      (All-resp-‚Ü≠ ‚Ü≠‚ÇÇ' (++‚Å∫-All (uncons‚ÇÅ (++‚Åª ≥ l‚ÇÅ‚ÇÅ sorted‚ÇÅ)) h‚ÇÇ‚ÇÇ))

merge/clocked/cost : cmp (Œ† nat Œª _ ‚Üí Œ† pair Œª _ ‚Üí cost)
merge/clocked/cost zero    (l‚ÇÅ     , l‚ÇÇ) = ùüò
merge/clocked/cost (suc k) ([]     , l‚ÇÇ) = ùüò
merge/clocked/cost (suc k) (x ‚à∑ l‚ÇÅ , l‚ÇÇ) =
  bind cost (splitMid (x ‚à∑ l‚ÇÅ) (s‚â§s z‚â§n)) Œª (l‚ÇÅ‚ÇÅ , pivot , l‚ÇÅ‚ÇÇ) ‚Üí splitMid/cost (x ‚à∑ l‚ÇÅ) (s‚â§s z‚â§n) ‚äï
    bind cost (splitBy l‚ÇÇ pivot) Œª (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ) ‚Üí splitBy/cost/closed l‚ÇÇ pivot ‚äï
      bind cost (merge/clocked k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚à• merge/clocked k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) Œª (l‚ÇÅ' , l‚ÇÇ') ‚Üí (merge/clocked/cost k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚äó merge/clocked/cost k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) ‚äï
        ùüò

merge/clocked/cost/closed : cmp (Œ† nat Œª _ ‚Üí Œ† pair Œª _ ‚Üí cost)
merge/clocked/cost/closed k (l‚ÇÅ , l‚ÇÇ) = pred[2^ k ] * ‚åàlog‚ÇÇ suc (length l‚ÇÇ) ‚åâ , k * ‚åàlog‚ÇÇ suc (length l‚ÇÇ) ‚åâ

merge/clocked/cost‚â§merge/clocked/cost/closed : ‚àÄ k l‚ÇÅ l‚ÇÇ ‚Üí ‚åàlog‚ÇÇ suc (length l‚ÇÅ) ‚åâ Nat.‚â§ k ‚Üí
  ‚óØ (merge/clocked/cost k (l‚ÇÅ , l‚ÇÇ) ‚â§‚Çö merge/clocked/cost/closed k (l‚ÇÅ , l‚ÇÇ))
merge/clocked/cost‚â§merge/clocked/cost/closed zero    l‚ÇÅ       l‚ÇÇ h-clock u = z‚â§n , z‚â§n
merge/clocked/cost‚â§merge/clocked/cost/closed (suc k) []       l‚ÇÇ h-clock u = z‚â§n , z‚â§n
merge/clocked/cost‚â§merge/clocked/cost/closed (suc k) (x ‚à∑ l‚ÇÅ) l‚ÇÇ h-clock u =
  let (l‚ÇÅ‚ÇÅ , pivot , l‚ÇÅ‚ÇÇ , ‚â°-splitMid , h‚ÇÅ‚ÇÅ , h‚ÇÅ‚ÇÇ , ‚â°-‚Ü≠) = splitMid/correct (x ‚à∑ l‚ÇÅ) (s‚â§s z‚â§n) u in
  let (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ , ‚â°' , _ , ‚â°-‚Ü≠') = splitBy/correct l‚ÇÇ pivot u in
  let h‚ÇÅ : ‚åàlog‚ÇÇ suc (length l‚ÇÅ‚ÇÅ) ‚åâ Nat.‚â§ k
      h‚ÇÅ =
        let open ‚â§-Reasoning in
        begin
          ‚åàlog‚ÇÇ suc (length l‚ÇÅ‚ÇÅ) ‚åâ
        ‚â§‚ü® log‚ÇÇ-mono (s‚â§s h‚ÇÅ‚ÇÅ) ‚ü©
          ‚åàlog‚ÇÇ ‚åà suc (length (x ‚à∑ l‚ÇÅ)) /2‚åâ ‚åâ
        ‚â§‚ü® log‚ÇÇ-suc (suc (length (x ‚à∑ l‚ÇÅ))) h-clock ‚ü©
          k
        ‚àé

      h‚ÇÇ : ‚åàlog‚ÇÇ suc (length l‚ÇÅ‚ÇÇ) ‚åâ Nat.‚â§ k
      h‚ÇÇ =
        let open ‚â§-Reasoning in
        begin
          ‚åàlog‚ÇÇ suc (length l‚ÇÅ‚ÇÇ) ‚åâ
        ‚â§‚ü® log‚ÇÇ-mono (s‚â§s h‚ÇÅ‚ÇÇ) ‚ü©
          ‚åàlog‚ÇÇ ‚åà suc (length (x ‚à∑ l‚ÇÅ)) /2‚åâ ‚åâ
        ‚â§‚ü® log‚ÇÇ-suc (suc (length (x ‚à∑ l‚ÇÅ))) h-clock ‚ü©
          k
        ‚àé
  in
  let (l‚ÇÅ' , ‚â°‚ÇÅ' , _) = merge/clocked/correct k l‚ÇÅ‚ÇÅ l‚ÇÇ‚ÇÅ h‚ÇÅ u in
  let (l‚ÇÇ' , ‚â°‚ÇÇ' , _) = merge/clocked/correct k l‚ÇÅ‚ÇÇ l‚ÇÇ‚ÇÇ h‚ÇÇ u in
  let open ‚â§‚Çö-Reasoning in
  begin
    (bind cost (splitMid (x ‚à∑ l‚ÇÅ) (s‚â§s z‚â§n)) Œª (l‚ÇÅ‚ÇÅ , pivot , l‚ÇÅ‚ÇÇ) ‚Üí splitMid/cost (x ‚à∑ l‚ÇÅ) (s‚â§s z‚â§n) ‚äï
      bind cost (splitBy l‚ÇÇ pivot) Œª (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ) ‚Üí splitBy/cost/closed l‚ÇÇ pivot ‚äï
        bind cost (merge/clocked k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚à• merge/clocked k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) Œª (l‚ÇÅ' , l‚ÇÇ') ‚Üí (merge/clocked/cost k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚äó merge/clocked/cost k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) ‚äï
          ùüò)
  ‚â°‚ü® Eq.cong (Œª e ‚Üí bind cost e Œª (l‚ÇÅ‚ÇÅ , pivot , l‚ÇÅ‚ÇÇ) ‚Üí splitMid/cost (x ‚à∑ l‚ÇÅ) (s‚â§s z‚â§n) ‚äï _) ‚â°-splitMid ‚ü©
    (splitMid/cost (x ‚à∑ l‚ÇÅ) (s‚â§s z‚â§n) ‚äï
      bind cost (splitBy l‚ÇÇ pivot) Œª (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ) ‚Üí splitBy/cost/closed l‚ÇÇ pivot ‚äï
        bind cost (merge/clocked k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚à• merge/clocked k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) Œª (l‚ÇÅ' , l‚ÇÇ') ‚Üí (merge/clocked/cost k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚äó merge/clocked/cost k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) ‚äï
          ùüò)
  ‚â°‚ü®‚ü©
    (ùüò ‚äï
      bind cost (splitBy l‚ÇÇ pivot) Œª (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ) ‚Üí splitBy/cost/closed l‚ÇÇ pivot ‚äï
        bind cost (merge/clocked k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚à• merge/clocked k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) Œª (l‚ÇÅ' , l‚ÇÇ') ‚Üí (merge/clocked/cost k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚äó merge/clocked/cost k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) ‚äï
          ùüò)
  ‚â°‚ü® ‚äï-identityÀ° _ ‚ü©
    (bind cost (splitBy l‚ÇÇ pivot) Œª (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ) ‚Üí splitBy/cost/closed l‚ÇÇ pivot ‚äï
      bind cost (merge/clocked k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚à• merge/clocked k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) Œª (l‚ÇÅ' , l‚ÇÇ') ‚Üí (merge/clocked/cost k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚äó merge/clocked/cost k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) ‚äï
        ùüò)
  ‚â°‚ü®
    Eq.cong
      (Œª e ‚Üí
        bind cost e Œª (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ) ‚Üí splitBy/cost/closed l‚ÇÇ pivot ‚äï
          bind cost (merge/clocked k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚à• merge/clocked k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) Œª (l‚ÇÅ' , l‚ÇÇ') ‚Üí (merge/clocked/cost k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚äó merge/clocked/cost k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) ‚äï
            ùüò)
      ‚â°'
  ‚ü©
    (splitBy/cost/closed l‚ÇÇ pivot ‚äï
      bind cost (merge/clocked k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚à• merge/clocked k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) Œª (l‚ÇÅ' , l‚ÇÇ') ‚Üí (merge/clocked/cost k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚äó merge/clocked/cost k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) ‚äï
        ùüò)
  ‚â°‚ü®
    Eq.cong‚ÇÇ
      (Œª e‚ÇÅ e‚ÇÇ ‚Üí
        splitBy/cost/closed l‚ÇÇ pivot ‚äï
          bind cost (e‚ÇÅ ‚à• e‚ÇÇ) Œª (l‚ÇÅ' , l‚ÇÇ') ‚Üí (merge/clocked/cost k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚äó merge/clocked/cost k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) ‚äï
            ùüò)
      ‚â°‚ÇÅ'
      ‚â°‚ÇÇ' ‚ü©
    splitBy/cost/closed l‚ÇÇ pivot ‚äï ((merge/clocked/cost k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚äó merge/clocked/cost k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) ‚äï ùüò)
  ‚â°‚ü® Eq.cong (splitBy/cost/closed l‚ÇÇ pivot ‚äï_) (‚äï-identity ≥ _) ‚ü©
    splitBy/cost/closed l‚ÇÇ pivot ‚äï (merge/clocked/cost k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚äó merge/clocked/cost k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ))
  ‚â§‚ü®
    ‚äï-mono ≥-‚â§ (splitBy/cost/closed l‚ÇÇ pivot) (
      ‚äó-mono-‚â§
        (merge/clocked/cost‚â§merge/clocked/cost/closed k l‚ÇÅ‚ÇÅ l‚ÇÇ‚ÇÅ h‚ÇÅ u)
        (merge/clocked/cost‚â§merge/clocked/cost/closed k l‚ÇÅ‚ÇÇ l‚ÇÇ‚ÇÇ h‚ÇÇ u)
    )
  ‚ü©
    splitBy/cost/closed l‚ÇÇ pivot ‚äï (merge/clocked/cost/closed k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚äó merge/clocked/cost/closed k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ))
  ‚â°‚ü®‚ü©
    (‚åàlog‚ÇÇ suc (length l‚ÇÇ) ‚åâ , ‚åàlog‚ÇÇ suc (length l‚ÇÇ) ‚åâ) ‚äï
      ((pred[2^ k ] * ‚åàlog‚ÇÇ suc (length l‚ÇÇ‚ÇÅ) ‚åâ , k * ‚åàlog‚ÇÇ suc (length l‚ÇÇ‚ÇÅ) ‚åâ) ‚äó
        (pred[2^ k ] * ‚åàlog‚ÇÇ suc (length l‚ÇÇ‚ÇÇ) ‚åâ , k * ‚åàlog‚ÇÇ suc (length l‚ÇÇ‚ÇÇ) ‚åâ))
  ‚â§‚ü®
    ‚äï-mono ≥-‚â§ (‚åàlog‚ÇÇ suc (length l‚ÇÇ) ‚åâ , ‚åàlog‚ÇÇ suc (length l‚ÇÇ) ‚åâ) (
      let h-length : length l‚ÇÇ‚ÇÅ + length l‚ÇÇ‚ÇÇ ‚â° length l‚ÇÇ
          h-length = Eq.sym (Eq.trans (Eq.cong length ‚â°-‚Ü≠') (length-++ l‚ÇÇ‚ÇÅ))

          h‚ÇÅ : ‚åàlog‚ÇÇ suc (length l‚ÇÇ‚ÇÅ) ‚åâ Nat.‚â§ ‚åàlog‚ÇÇ suc (length l‚ÇÇ) ‚åâ
          h‚ÇÅ = log‚ÇÇ-mono (s‚â§s (N.m+n‚â§o‚áím‚â§o (length l‚ÇÇ‚ÇÅ) (N.‚â§-reflexive h-length)))

          h‚ÇÇ : ‚åàlog‚ÇÇ suc (length l‚ÇÇ‚ÇÇ) ‚åâ Nat.‚â§ ‚åàlog‚ÇÇ suc (length l‚ÇÇ) ‚åâ
          h‚ÇÇ = log‚ÇÇ-mono (s‚â§s (N.m+n‚â§o‚áín‚â§o (length l‚ÇÇ‚ÇÅ) (N.‚â§-reflexive h-length)))
      in
      ‚äó-mono-‚â§
        (N.*-mono ≥-‚â§ pred[2^ k ] h‚ÇÅ , N.*-mono ≥-‚â§ k h‚ÇÅ)
        (N.*-mono ≥-‚â§ pred[2^ k ] h‚ÇÇ , N.*-mono ≥-‚â§ k h‚ÇÇ)
    )
  ‚ü©
    (‚åàlog‚ÇÇ suc (length l‚ÇÇ) ‚åâ , ‚åàlog‚ÇÇ suc (length l‚ÇÇ) ‚åâ) ‚äï
      ((pred[2^ k ] * ‚åàlog‚ÇÇ suc (length l‚ÇÇ) ‚åâ , k * ‚åàlog‚ÇÇ suc (length l‚ÇÇ) ‚åâ) ‚äó
        (pred[2^ k ] * ‚åàlog‚ÇÇ suc (length l‚ÇÇ) ‚åâ , k * ‚åàlog‚ÇÇ suc (length l‚ÇÇ) ‚åâ))
  ‚â°‚ü® Eq.cong‚ÇÇ _,_ (arithmetic/work ‚åàlog‚ÇÇ suc (length l‚ÇÇ) ‚åâ) (arithmetic/span ‚åàlog‚ÇÇ suc (length l‚ÇÇ) ‚åâ) ‚ü©
    pred[2^ suc k ] * ‚åàlog‚ÇÇ suc (length l‚ÇÇ) ‚åâ , suc k * ‚åàlog‚ÇÇ suc (length l‚ÇÇ) ‚åâ
  ‚â°‚ü®‚ü©
    merge/clocked/cost/closed (suc k) (x ‚à∑ l‚ÇÅ , l‚ÇÇ)
  ‚àé
    where
      arithmetic/work : ‚àÄ n ‚Üí n + (pred[2^ k ] * n + pred[2^ k ] * n) ‚â° pred[2^ suc k ] * n
      arithmetic/work n =
        begin
          n + (pred[2^ k ] * n + pred[2^ k ] * n)
        ‚â°Àò‚ü® Eq.cong (n +_) (N.*-distrib ≥-+ n (pred[2^ k ]) (pred[2^ k ])) ‚ü©
          n + (pred[2^ k ] + pred[2^ k ]) * n
        ‚â°‚ü®‚ü©
          suc (pred[2^ k ] + pred[2^ k ]) * n
        ‚â°‚ü® Eq.cong (_* n) (pred[2^suc[n]] k) ‚ü©
          pred[2^ suc k ] * n
        ‚àé
          where open ‚â°-Reasoning

      arithmetic/span : ‚àÄ n ‚Üí n + (k * n ‚äî k * n) ‚â° suc k * n
      arithmetic/span n =
        begin
          n + (k * n ‚äî k * n)
        ‚â°‚ü® Eq.cong (n +_) (N.‚äî-idem (k * n)) ‚ü©
          n + k * n
        ‚â°‚ü®‚ü©
          suc k * n
        ‚àé
          where open ‚â°-Reasoning

merge/clocked‚â§merge/clocked/cost : ‚àÄ k l‚ÇÅ l‚ÇÇ ‚Üí IsBounded (list A) (merge/clocked k (l‚ÇÅ , l‚ÇÇ)) (merge/clocked/cost k (l‚ÇÅ , l‚ÇÇ))
merge/clocked‚â§merge/clocked/cost zero    l‚ÇÅ       l‚ÇÇ = bound/ret
merge/clocked‚â§merge/clocked/cost (suc k) []       l‚ÇÇ = bound/ret
merge/clocked‚â§merge/clocked/cost (suc k) (x ‚à∑ l‚ÇÅ) l‚ÇÇ =
  bound/bind (splitMid/cost (x ‚à∑ l‚ÇÅ) (s‚â§s z‚â§n)) _ (splitMid‚â§splitMid/cost (x ‚à∑ l‚ÇÅ) (s‚â§s z‚â§n)) Œª (l‚ÇÅ‚ÇÅ , pivot , l‚ÇÅ‚ÇÇ) ‚Üí
    bound/bind (splitBy/cost/closed l‚ÇÇ pivot) _ (splitBy‚â§splitBy/cost/closed l‚ÇÇ pivot) Œª (l‚ÇÇ‚ÇÅ , l‚ÇÇ‚ÇÇ) ‚Üí
      bound/bind (merge/clocked/cost k (l‚ÇÅ‚ÇÅ , l‚ÇÇ‚ÇÅ) ‚äó merge/clocked/cost k (l‚ÇÅ‚ÇÇ , l‚ÇÇ‚ÇÇ)) _ (bound/par (merge/clocked‚â§merge/clocked/cost k l‚ÇÅ‚ÇÅ l‚ÇÇ‚ÇÅ) (merge/clocked‚â§merge/clocked/cost k l‚ÇÅ‚ÇÇ l‚ÇÇ‚ÇÇ)) Œª (l‚ÇÅ' , l‚ÇÇ') ‚Üí
        bound/ret

merge/clocked‚â§merge/clocked/cost/closed : ‚àÄ k l‚ÇÅ l‚ÇÇ ‚Üí ‚åàlog‚ÇÇ suc (length l‚ÇÅ) ‚åâ Nat.‚â§ k ‚Üí
  IsBounded (list A) (merge/clocked k (l‚ÇÅ , l‚ÇÇ)) (merge/clocked/cost/closed k (l‚ÇÅ , l‚ÇÇ))
merge/clocked‚â§merge/clocked/cost/closed k l‚ÇÅ l‚ÇÇ h =
  bound/relax (merge/clocked/cost‚â§merge/clocked/cost/closed k l‚ÇÅ l‚ÇÇ h) (merge/clocked‚â§merge/clocked/cost k l‚ÇÅ l‚ÇÇ)

merge : cmp (Œ† pair Œª _ ‚Üí F (list A))
merge (l‚ÇÅ , l‚ÇÇ) = merge/clocked ‚åàlog‚ÇÇ suc (length l‚ÇÅ) ‚åâ (l‚ÇÅ , l‚ÇÇ)

merge/correct : ‚àÄ l‚ÇÅ l‚ÇÇ ‚Üí
  ‚óØ (‚àÉ Œª l ‚Üí merge (l‚ÇÅ , l‚ÇÇ) ‚â° ret l √ó (Sorted l‚ÇÅ ‚Üí Sorted l‚ÇÇ ‚Üí SortedOf (l‚ÇÅ ++ l‚ÇÇ) l))
merge/correct l‚ÇÅ l‚ÇÇ = merge/clocked/correct ‚åàlog‚ÇÇ suc (length l‚ÇÅ) ‚åâ l‚ÇÅ l‚ÇÇ N.‚â§-refl

merge/cost : cmp (Œ† pair Œª _ ‚Üí cost)
merge/cost (l‚ÇÅ , l‚ÇÇ) = merge/clocked/cost ‚åàlog‚ÇÇ suc (length l‚ÇÅ) ‚åâ (l‚ÇÅ , l‚ÇÇ)

merge/cost/closed : cmp (Œ† pair Œª _ ‚Üí cost)
merge/cost/closed (l‚ÇÅ , l‚ÇÇ) = merge/clocked/cost/closed ‚åàlog‚ÇÇ suc (length l‚ÇÅ) ‚åâ (l‚ÇÅ , l‚ÇÇ)

merge‚â§merge/cost : ‚àÄ l‚ÇÅ l‚ÇÇ ‚Üí IsBounded (list A) (merge (l‚ÇÅ , l‚ÇÇ)) (merge/cost (l‚ÇÅ , l‚ÇÇ))
merge‚â§merge/cost l‚ÇÅ l‚ÇÇ = merge/clocked‚â§merge/clocked/cost ‚åàlog‚ÇÇ suc (length l‚ÇÅ) ‚åâ l‚ÇÅ l‚ÇÇ

merge‚â§merge/cost/closed : ‚àÄ l‚ÇÅ l‚ÇÇ ‚Üí IsBounded (list A) (merge (l‚ÇÅ , l‚ÇÇ)) (merge/cost/closed (l‚ÇÅ , l‚ÇÇ))
merge‚â§merge/cost/closed l‚ÇÅ l‚ÇÇ = merge/clocked‚â§merge/clocked/cost/closed ‚åàlog‚ÇÇ suc (length l‚ÇÅ) ‚åâ l‚ÇÅ l‚ÇÇ N.‚â§-refl
