{-# OPTIONS --rewriting #-}

open import Examples.Sorting.Sequential.Comparable

module Examples.Sorting.Sequential.InsertionSort (M : Comparable) where

open Comparable M
open import Examples.Sorting.Sequential.Core M

open import Calf costMonoid hiding (A)
open import Calf.Data.Bool using (bool)
open import Calf.Data.List
open import Calf.Data.Equality using (_‚â°_; refl)
open import Calf.Data.IsBoundedG costMonoid
open import Calf.Data.IsBounded costMonoid
open import Calf.Data.BigO costMonoid

open import Relation.Nullary
open import Relation.Nullary.Negation
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl; module ‚â°-Reasoning)
open import Data.Product using (‚àÉ)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Function
open import Data.Nat as Nat using (‚Ñï; zero; suc; z‚â§n; s‚â§s; _+_; _*_)
import Data.Nat.Properties as N
open import Data.Nat.Square


insert : cmp (Œ† A Œª x ‚Üí Œ† (list A) Œª l ‚Üí Œ† (sorted l) Œª _ ‚Üí F (Œ£‚Å∫ (list A) Œª l' ‚Üí sorted-of (x ‚à∑ l) l'))
insert x []       []       = ret ([ x ] , refl , [] ‚à∑ [])
insert x (y ‚à∑ ys) (h ‚à∑ hs) =
  bind (F _) (x ‚â§? y) $ case-‚â§
    (Œª x‚â§y ‚Üí ret (x ‚à∑ (y ‚à∑ ys) , refl , (x‚â§y ‚à∑ ‚â§-‚â§* x‚â§y h) ‚à∑ (h ‚à∑ hs)))
    (Œª x‚â∞y ‚Üí
      bind (F _) (insert x ys hs) Œª (x‚à∑ys' , x‚à∑ys‚Ü≠x‚à∑ys' , sorted-x‚à∑ys') ‚Üí
      ret
        ( y ‚à∑ x‚à∑ys'
        , ( let open PermutationReasoning in
            begin
              x ‚à∑ y ‚à∑ ys
            <<‚ü® refl ‚ü©
              y ‚à∑ (x ‚à∑ ys)
            <‚ü® x‚à∑ys‚Ü≠x‚à∑ys' ‚ü©
              y ‚à∑ x‚à∑ys'
            ‚àé
          )
        , All-resp-‚Ü≠ x‚à∑ys‚Ü≠x‚à∑ys' (‚â∞‚áí‚â• x‚â∞y ‚à∑ h) ‚à∑ sorted-x‚à∑ys'
        ))

insert/total : ‚àÄ x l h ‚Üí IsValuable (insert x l h)
insert/total x []       []       u = ‚Üì refl
insert/total x (y ‚à∑ ys) (h ‚à∑ hs) u with ‚â§?-total x y u
... | yes x‚â§y , ‚â°ret rewrite ‚â°ret = ‚Üì refl
... | no x‚â∞y , ‚â°ret rewrite ‚â°ret | Valuable.proof (insert/total x ys hs u) = ‚Üì refl

insert/cost : cmp (Œ† A Œª _ ‚Üí Œ† (list A) Œª _ ‚Üí cost)
insert/cost x l = step‚ãÜ (length l)

insert/is-bounded : ‚àÄ x l h ‚Üí IsBoundedG (Œ£‚Å∫ (list A) Œª l' ‚Üí sorted-of (x ‚à∑ l) l') (insert x l h) (insert/cost x l)
insert/is-bounded x []       []       = ‚â§‚Åª-refl
insert/is-bounded x (y ‚à∑ ys) (h ‚à∑ hs) =
  bound/bind/const {_} {Œ£‚Å∫ (list A) Œª l' ‚Üí sorted-of (x ‚à∑ (y ‚à∑ ys)) l'}
    {x ‚â§? y}
    {case-‚â§ _ _}
    1
    (length ys)
    (h-cost x y)
    Œª { (yes x‚â§y) ‚Üí step-monoÀ°-‚â§‚Åª (ret _) (z‚â§n {length ys})
      ; (no ¬¨x‚â§y) ‚Üí insert/is-bounded x ys hs
      }


sort : cmp sorting
sort []       = ret ([] , refl , [])
sort (x ‚à∑ xs) =
  bind (F (Œ£‚Å∫ (list A) (sorted-of (x ‚à∑ xs)))) (sort xs) Œª (xs' , xs‚Ü≠xs' , sorted-xs') ‚Üí
  bind (F (Œ£‚Å∫ (list A) (sorted-of (x ‚à∑ xs)))) (insert x xs' sorted-xs') Œª (x‚à∑xs' , x‚à∑xs‚Ü≠x‚à∑xs' , sorted-x‚à∑xs') ‚Üí
  ret (x‚à∑xs' , trans (prep x xs‚Ü≠xs') x‚à∑xs‚Ü≠x‚à∑xs' , sorted-x‚à∑xs')

sort/total : IsTotal sort
sort/total []       u = ‚Üì refl
sort/total (x ‚à∑ xs) u = ‚Üì
  let (xs' , xs‚Ü≠xs' , sorted-xs') = Valuable.value (sort/total xs u) in
  let (x‚à∑xs' , x‚à∑xs‚Ü≠x‚à∑xs' , sorted-x‚à∑xs') = Valuable.value (insert/total x xs' sorted-xs' u) in
  let open ‚â°-Reasoning in
  begin
    sort (x ‚à∑ xs)
  ‚â°‚ü®
    Eq.cong
      (Œª e ‚Üí
        bind (F (Œ£‚Å∫ (list A) (sorted-of (x ‚à∑ xs)))) e Œª (xs' , xs‚Ü≠xs' , sorted-xs') ‚Üí
        bind (F (Œ£‚Å∫ (list A) (sorted-of (x ‚à∑ xs)))) (insert x xs' sorted-xs') Œª (x‚à∑xs' , x‚à∑xs‚Ü≠x‚à∑xs' , sorted-x‚à∑xs') ‚Üí
        ret (x‚à∑xs' , trans (prep x xs‚Ü≠xs') x‚à∑xs‚Ü≠x‚à∑xs' , sorted-x‚à∑xs'))
      (Valuable.proof (sort/total xs u))
  ‚ü©
    ( bind (F (Œ£‚Å∫ (list A) (sorted-of (x ‚à∑ xs)))) (insert x xs' sorted-xs') Œª (x‚à∑xs' , x‚à∑xs‚Ü≠x‚à∑xs' , sorted-x‚à∑xs') ‚Üí
      ret (x‚à∑xs' , _ , sorted-x‚à∑xs')
    )
  ‚â°‚ü®
    Eq.cong
      (Œª e ‚Üí
        bind (F (Œ£‚Å∫ (list A) (sorted-of (x ‚à∑ xs)))) e Œª (x‚à∑xs' , x‚à∑xs‚Ü≠x‚à∑xs' , sorted-x‚à∑xs') ‚Üí
        ret (x‚à∑xs' , trans (prep x xs‚Ü≠xs') x‚à∑xs‚Ü≠x‚à∑xs' , sorted-x‚à∑xs'))
      (Valuable.proof (insert/total x xs' sorted-xs' u))
  ‚ü©
    ret _
  ‚àé

sort/cost : cmp (Œ† (list A) Œª _ ‚Üí cost)
sort/cost l = step‚ãÜ (length l ¬≤)

sort/is-bounded : ‚àÄ l ‚Üí IsBoundedG (Œ£‚Å∫ (list A) (sorted-of l)) (sort l) (sort/cost l)
sort/is-bounded []       = ‚â§‚Åª-refl
sort/is-bounded (x ‚à∑ xs) =
  let open ‚â§‚Åª-Reasoning cost in
  begin
    ( bind cost (sort xs) Œª (xs' , xs‚Ü≠xs' , sorted-xs') ‚Üí
      bind cost (insert x xs' sorted-xs') Œª _ ‚Üí
      step‚ãÜ zero
    )
  ‚â§‚Åª‚ü® bind-mono ≥-‚â§‚Åª (sort xs) (Œª (xs' , xs‚Ü≠xs' , sorted-xs') ‚Üí insert/is-bounded x xs' sorted-xs') ‚ü©
    ( bind cost (sort xs) Œª (xs' , xs‚Ü≠xs' , sorted-xs') ‚Üí
      step‚ãÜ (length xs')
    )
  ‚â°Àò‚ü®
    Eq.cong
      (bind cost (sort xs))
      (funext Œª (xs' , xs‚Ü≠xs' , sorted-xs') ‚Üí Eq.cong step‚ãÜ (‚Ü≠-length xs‚Ü≠xs'))
  ‚ü©
    ( bind cost (sort xs) Œª _ ‚Üí
      step‚ãÜ (length xs)
    )
  ‚â§‚Åª‚ü® bind-monoÀ°-‚â§‚Åª (Œª _ ‚Üí step‚ãÜ (length xs)) (sort/is-bounded xs) ‚ü©
    step‚ãÜ ((length xs ¬≤) + length xs)
  ‚â§‚Åª‚ü® step‚ãÜ-mono-‚â§‚Åª (N.+-mono-‚â§ (N.*-mono ≥-‚â§ (length xs) (N.n‚â§1+n (length xs))) (N.n‚â§1+n (length xs))) ‚ü©
    step‚ãÜ (length xs * length (x ‚à∑ xs) + length (x ‚à∑ xs))
  ‚â°‚ü® Eq.cong step‚ãÜ (N.+-comm (length xs * length (x ‚à∑ xs)) (length (x ‚à∑ xs))) ‚ü©
    step‚ãÜ (length (x ‚à∑ xs) ¬≤)
  ‚â°‚ü®‚ü©
    sort/cost (x ‚à∑ xs)
  ‚àé

sort/asymptotic : given (list A) measured-via length , sort ‚ààùìû(Œª n ‚Üí n ¬≤)
sort/asymptotic = f[n]‚â§g[n]via sort/is-bounded
